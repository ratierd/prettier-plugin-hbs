import { DEBUG } from '@glimmer/env';
var debugToString = void 0;
if (DEBUG) {
    var getFunctionName = function getFunctionName(fn) {
        var functionName = fn.name;
        if (functionName === undefined) {
            var match = Function.prototype.toString.call(fn).match(/function (\w+)\s*\(/);
            functionName = match && match[1] || '';
        }
        return functionName.replace(/^bound /, '');
    };
    var getObjectName = function getObjectName(obj) {
        var name = void 0;
        var className = void 0;
        if (obj.constructor && obj.constructor !== Object) {
            className = getFunctionName(obj.constructor);
        }
        if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
            name = obj.toString();
        }
        // If the class has a decent looking name, and the `toString` is one of the
        // default Ember toStrings, replace the constructor portion of the toString
        // with the class name. We check the length of the class name to prevent doing
        // this when the value is minified.
        if (name && name.match(/<.*:ember\d+>/) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
            return name.replace(/<.*:/, '<' + className + ':');
        }
        return name || className;
    };
    var getPrimitiveName = function getPrimitiveName(value) {
        return String(value);
    };
    debugToString = function debugToString(value) {
        if (typeof value === 'function') {
            return getFunctionName(value) || '(unknown function)';
        } else if (typeof value === 'object' && value !== null) {
            return getObjectName(value) || '(unknown object)';
        } else {
            return getPrimitiveName(value);
        }
    };
}
export default debugToString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2RlYnVnLXRvLXN0cmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFBLEtBQUEsUUFBQSxjQUFBO0FBRUEsSUFBQSxzQkFBQTtBQUVBLElBQUEsS0FBQSxFQUFXO0FBQ1QsUUFBSSxrQkFBa0IsU0FBbEIsZUFBa0IsS0FBaUI7QUFDckMsWUFBSSxlQUFlLEdBQW5CLElBQUE7QUFFQSxZQUFJLGlCQUFKLFNBQUEsRUFBZ0M7QUFDOUIsZ0JBQUksUUFBUSxTQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsSUFBQSxDQUFBLEVBQUEsRUFBQSxLQUFBLENBQVoscUJBQVksQ0FBWjtBQUVBLDJCQUFnQixTQUFTLE1BQVYsQ0FBVSxDQUFULElBQWhCLEVBQUE7QUFDRDtBQUVELGVBQU8sYUFBQSxPQUFBLENBQUEsU0FBQSxFQUFQLEVBQU8sQ0FBUDtBQVRGLEtBQUE7QUFZQSxRQUFJLGdCQUFnQixTQUFoQixhQUFnQixNQUFnQjtBQUNsQyxZQUFBLGFBQUE7QUFDQSxZQUFBLGtCQUFBO0FBRUEsWUFBSSxJQUFBLFdBQUEsSUFBbUIsSUFBQSxXQUFBLEtBQXZCLE1BQUEsRUFBbUQ7QUFDakQsd0JBQVksZ0JBQWdCLElBQTVCLFdBQVksQ0FBWjtBQUNEO0FBRUQsWUFDRSxjQUFBLEdBQUEsSUFDQSxJQUFBLFFBQUEsS0FBaUIsT0FBQSxTQUFBLENBRGpCLFFBQUEsSUFFQSxJQUFBLFFBQUEsS0FBaUIsU0FBQSxTQUFBLENBSG5CLFFBQUEsRUFJRTtBQUNBLG1CQUFPLElBQVAsUUFBTyxFQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQ0UsUUFDQSxLQUFBLEtBQUEsQ0FEQSxlQUNBLENBREEsSUFBQSxTQUFBLElBR0EsVUFBQSxDQUFBLE1BSEEsR0FBQSxJQUlBLFVBQUEsTUFBQSxHQUpBLENBQUEsSUFLQSxjQU5GLE9BQUEsRUFPRTtBQUNBLG1CQUFPLEtBQUEsT0FBQSxDQUFBLE1BQUEsUUFBUCxTQUFPLE9BQVA7QUFDRDtBQUVELGVBQU8sUUFBUCxTQUFBO0FBL0JGLEtBQUE7QUFrQ0EsUUFBSSxtQkFBbUIsU0FBbkIsZ0JBQW1CLFFBQWU7QUFDcEMsZUFBTyxPQUFQLEtBQU8sQ0FBUDtBQURGLEtBQUE7QUFJQSxvQkFBZ0IsOEJBQW1CO0FBQ2pDLFlBQUksT0FBQSxLQUFBLEtBQUosVUFBQSxFQUFpQztBQUMvQixtQkFBTyxnQkFBUCxLQUFPLHlCQUFQO0FBREYsU0FBQSxNQUVPLElBQUksT0FBQSxLQUFBLEtBQUEsUUFBQSxJQUE2QixVQUFqQyxJQUFBLEVBQWlEO0FBQ3RELG1CQUFPLGNBQVAsS0FBTyx1QkFBUDtBQURLLFNBQUEsTUFFQTtBQUNMLG1CQUFPLGlCQUFQLEtBQU8sQ0FBUDtBQUNEO0FBUEgsS0FBQTtBQVNEO0FBRUQsZUFBQSxhQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUcgfSBmcm9tICdAZ2xpbW1lci9lbnYnO1xuXG5sZXQgZGVidWdUb1N0cmluZzogdW5kZWZpbmVkIHwgKCh2YWx1ZTogdW5rbm93bikgPT4gc3RyaW5nKTtcblxuaWYgKERFQlVHKSB7XG4gIGxldCBnZXRGdW5jdGlvbk5hbWUgPSAoZm46IEZ1bmN0aW9uKSA9PiB7XG4gICAgbGV0IGZ1bmN0aW9uTmFtZSA9IGZuLm5hbWU7XG5cbiAgICBpZiAoZnVuY3Rpb25OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBtYXRjaCA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZuKS5tYXRjaCgvZnVuY3Rpb24gKFxcdyspXFxzKlxcKC8pO1xuXG4gICAgICBmdW5jdGlvbk5hbWUgPSAobWF0Y2ggJiYgbWF0Y2hbMV0pIHx8ICcnO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbk5hbWUucmVwbGFjZSgvXmJvdW5kIC8sICcnKTtcbiAgfTtcblxuICBsZXQgZ2V0T2JqZWN0TmFtZSA9IChvYmo6IG9iamVjdCkgPT4ge1xuICAgIGxldCBuYW1lO1xuICAgIGxldCBjbGFzc05hbWU7XG5cbiAgICBpZiAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KSB7XG4gICAgICBjbGFzc05hbWUgPSBnZXRGdW5jdGlvbk5hbWUob2JqLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAndG9TdHJpbmcnIGluIG9iaiAmJlxuICAgICAgb2JqLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICYmXG4gICAgICBvYmoudG9TdHJpbmcgIT09IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZ1xuICAgICkge1xuICAgICAgbmFtZSA9IG9iai50b1N0cmluZygpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBjbGFzcyBoYXMgYSBkZWNlbnQgbG9va2luZyBuYW1lLCBhbmQgdGhlIGB0b1N0cmluZ2AgaXMgb25lIG9mIHRoZVxuICAgIC8vIGRlZmF1bHQgRW1iZXIgdG9TdHJpbmdzLCByZXBsYWNlIHRoZSBjb25zdHJ1Y3RvciBwb3J0aW9uIG9mIHRoZSB0b1N0cmluZ1xuICAgIC8vIHdpdGggdGhlIGNsYXNzIG5hbWUuIFdlIGNoZWNrIHRoZSBsZW5ndGggb2YgdGhlIGNsYXNzIG5hbWUgdG8gcHJldmVudCBkb2luZ1xuICAgIC8vIHRoaXMgd2hlbiB0aGUgdmFsdWUgaXMgbWluaWZpZWQuXG4gICAgaWYgKFxuICAgICAgbmFtZSAmJlxuICAgICAgbmFtZS5tYXRjaCgvPC4qOmVtYmVyXFxkKz4vKSAmJlxuICAgICAgY2xhc3NOYW1lICYmXG4gICAgICBjbGFzc05hbWVbMF0gIT09ICdfJyAmJlxuICAgICAgY2xhc3NOYW1lLmxlbmd0aCA+IDIgJiZcbiAgICAgIGNsYXNzTmFtZSAhPT0gJ0NsYXNzJ1xuICAgICkge1xuICAgICAgcmV0dXJuIG5hbWUucmVwbGFjZSgvPC4qOi8sIGA8JHtjbGFzc05hbWV9OmApO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lIHx8IGNsYXNzTmFtZTtcbiAgfTtcblxuICBsZXQgZ2V0UHJpbWl0aXZlTmFtZSA9ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gIH07XG5cbiAgZGVidWdUb1N0cmluZyA9ICh2YWx1ZTogdW5rbm93bikgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBnZXRGdW5jdGlvbk5hbWUodmFsdWUpIHx8IGAodW5rbm93biBmdW5jdGlvbilgO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGdldE9iamVjdE5hbWUodmFsdWUpIHx8IGAodW5rbm93biBvYmplY3QpYDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldFByaW1pdGl2ZU5hbWUodmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVidWdUb1N0cmluZztcbiJdLCJzb3VyY2VSb290IjoiIn0=