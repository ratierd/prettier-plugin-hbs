define('@glimmer/syntax', ['exports', '@glimmer/util', 'simple-html-tokenizer', 'handlebars'], function (exports, util, simpleHtmlTokenizer, handlebars) { 'use strict';

    function buildMustache(path, params, hash, raw, loc, strip) {
        if (typeof path === 'string') {
            path = buildHead(path);
        }
        return {
            type: 'MustacheStatement',
            path: path,
            params: params || [],
            hash: hash || buildHash([]),
            escaped: !raw,
            loc: buildLoc(loc || null),
            strip: strip || { open: false, close: false }
        };
    }
    function buildBlock(path, params, hash, _defaultBlock, _elseBlock, loc, openStrip, inverseStrip, closeStrip) {
        var defaultBlock = void 0;
        var elseBlock = void 0;
        if (_defaultBlock.type === 'Template') {
            defaultBlock = util.assign({}, _defaultBlock, { type: 'Block' });
        } else {
            defaultBlock = _defaultBlock;
        }
        if (_elseBlock !== undefined && _elseBlock !== null && _elseBlock.type === 'Template') {
            elseBlock = util.assign({}, _elseBlock, { type: 'Block' });
        } else {
            elseBlock = _elseBlock;
        }
        return {
            type: 'BlockStatement',
            path: buildHead(path),
            params: params || [],
            hash: hash || buildHash([]),
            program: defaultBlock || null,
            inverse: elseBlock || null,
            loc: buildLoc(loc || null),
            openStrip: openStrip || { open: false, close: false },
            inverseStrip: inverseStrip || { open: false, close: false },
            closeStrip: closeStrip || { open: false, close: false }
        };
    }
    function buildElementModifier(path, params, hash, loc) {
        return {
            type: 'ElementModifierStatement',
            path: buildHead(path),
            params: params || [],
            hash: hash || buildHash([]),
            loc: buildLoc(loc || null)
        };
    }
    function buildPartial(name, params, hash, indent, loc) {
        return {
            type: 'PartialStatement',
            name: name,
            params: params || [],
            hash: hash || buildHash([]),
            indent: indent || '',
            strip: { open: false, close: false },
            loc: buildLoc(loc || null)
        };
    }
    function buildComment(value, loc) {
        return {
            type: 'CommentStatement',
            value: value,
            loc: buildLoc(loc || null)
        };
    }
    function buildMustacheComment(value, loc) {
        return {
            type: 'MustacheCommentStatement',
            value: value,
            loc: buildLoc(loc || null)
        };
    }
    function buildConcat(parts, loc) {
        return {
            type: 'ConcatStatement',
            parts: parts || [],
            loc: buildLoc(loc || null)
        };
    }
    function isLocSexp(value) {
        return Array.isArray(value) && value.length === 2 && value[0] === 'loc';
    }
    function isParamsSexp(value) {
        return Array.isArray(value) && !isLocSexp(value);
    }
    function isHashSexp(value) {
        if (typeof value === 'object' && value && !Array.isArray(value)) {
            return true;
        } else {
            return false;
        }
    }
    function normalizeModifier(sexp) {
        if (typeof sexp === 'string') {
            return buildElementModifier(sexp);
        }
        var path = normalizeHead(sexp[0]);
        var params = void 0;
        var hash = void 0;
        var loc = null;
        var parts = sexp.slice(1);
        var next = parts.shift();
        _process: {
            if (isParamsSexp(next)) {
                params = next;
            } else {
                break _process;
            }
            next = parts.shift();
            if (isHashSexp(next)) {
                hash = normalizeHash(next);
            } else {
                break _process;
            }
        }
        if (isLocSexp(next)) {
            loc = next[1];
        }
        return {
            type: 'ElementModifierStatement',
            path: path,
            params: params || [],
            hash: hash || buildHash([]),
            loc: buildLoc(loc || null)
        };
    }
    function normalizeAttr(sexp) {
        var name = sexp[0];
        var value = void 0;
        if (typeof sexp[1] === 'string') {
            value = buildText(sexp[1]);
        } else {
            value = sexp[1];
        }
        var loc = sexp[2] ? sexp[2][1] : undefined;
        return buildAttr(name, value, loc);
    }
    function normalizeHash(hash, loc) {
        var pairs = [];
        Object.keys(hash).forEach(function (key) {
            pairs.push(buildPair(key, hash[key]));
        });
        return buildHash(pairs, loc);
    }
    function normalizeHead(path) {
        if (typeof path === 'string') {
            return buildHead(path);
        } else {
            return buildHead(path[1], path[2] && path[2][1]);
        }
    }
    function normalizeElementOptions() {
        var out = {};

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        for (var _iterator = args, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var arg = _ref;

            switch (arg[0]) {
                case 'attrs':
                    {
                        var rest = arg.slice(1);

                        out.attrs = rest.map(normalizeAttr);
                        break;
                    }
                case 'modifiers':
                    {
                        var _rest = arg.slice(1);

                        out.modifiers = _rest.map(normalizeModifier);
                        break;
                    }
                case 'body':
                    {
                        var _rest2 = arg.slice(1);

                        out.children = _rest2;
                        break;
                    }
                case 'comments':
                    {
                        var _rest3 = arg.slice(1);

                        out.comments = _rest3;
                        break;
                    }
                case 'as':
                    {
                        var _rest4 = arg.slice(1);

                        out.blockParams = _rest4;
                        break;
                    }
                case 'loc':
                    {
                        var _rest5 = arg[1];

                        out.loc = _rest5;
                        break;
                    }
            }
        }
        return out;
    }
    function buildElement(tag, options) {
        var normalized = void 0;
        if (Array.isArray(options)) {
            for (var _len2 = arguments.length, rest = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                rest[_key2 - 2] = arguments[_key2];
            }

            normalized = normalizeElementOptions.apply(undefined, [options].concat(rest));
        } else {
            normalized = options || {};
        }
        var _normalized = normalized,
            attrs = _normalized.attrs,
            blockParams = _normalized.blockParams,
            modifiers = _normalized.modifiers,
            comments = _normalized.comments,
            children = _normalized.children,
            loc = _normalized.loc;
        // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST

        var selfClosing = false;
        if (typeof tag === 'object') {
            selfClosing = tag.selfClosing;
            tag = tag.name;
        } else {
            if (tag.slice(-1) === '/') {
                tag = tag.slice(0, -1);
                selfClosing = true;
            }
        }
        return {
            type: 'ElementNode',
            tag: tag || '',
            selfClosing: selfClosing,
            attributes: attrs || [],
            blockParams: blockParams || [],
            modifiers: modifiers || [],
            comments: comments || [],
            children: children || [],
            loc: buildLoc(loc || null)
        };
    }
    function buildAttr(name, value, loc) {
        return {
            type: 'AttrNode',
            name: name,
            value: value,
            loc: buildLoc(loc || null)
        };
    }
    function buildText(chars, loc) {
        return {
            type: 'TextNode',
            chars: chars || '',
            loc: buildLoc(loc || null)
        };
    }
    // Expressions
    function buildSexpr(path, params, hash, loc) {
        return {
            type: 'SubExpression',
            path: buildHead(path),
            params: params || [],
            hash: hash || buildHash([]),
            loc: buildLoc(loc || null)
        };
    }
    function buildHead(original, loc) {
        if (typeof original !== 'string') return original;
        var parts = original.split('.');
        var thisHead = false;
        if (parts[0] === 'this') {
            thisHead = true;
            parts = parts.slice(1);
        }
        return {
            type: 'PathExpression',
            original: original,
            this: thisHead,
            parts: parts,
            data: false,
            loc: buildLoc(loc || null)
        };
    }
    function buildLiteral(type, value, loc) {
        return {
            type: type,
            value: value,
            original: value,
            loc: buildLoc(loc || null)
        };
    }
    // Miscellaneous
    function buildHash(pairs, loc) {
        return {
            type: 'Hash',
            pairs: pairs || [],
            loc: buildLoc(loc || null)
        };
    }
    function buildPair(key, value, loc) {
        return {
            type: 'HashPair',
            key: key,
            value: value,
            loc: buildLoc(loc || null)
        };
    }
    function buildProgram(body, blockParams, loc) {
        return {
            type: 'Template',
            body: body || [],
            blockParams: blockParams || [],
            loc: buildLoc(loc || null)
        };
    }
    function buildBlockItself(body, blockParams) {
        var chained = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var loc = arguments[3];

        return {
            type: 'Block',
            body: body || [],
            blockParams: blockParams || [],
            chained: chained,
            loc: buildLoc(loc || null)
        };
    }
    function buildTemplate(body, blockParams, loc) {
        return {
            type: 'Template',
            body: body || [],
            blockParams: blockParams || [],
            loc: buildLoc(loc || null)
        };
    }
    function buildSource(source) {
        return source || null;
    }
    function buildPosition(line, column) {
        return {
            line: line,
            column: column
        };
    }
    var SYNTHETIC = {
        source: '(synthetic)',
        start: { line: 1, column: 0 },
        end: { line: 1, column: 0 }
    };
    function buildLoc() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        if (args.length === 1) {
            var loc = args[0];
            if (loc && typeof loc === 'object') {
                return {
                    source: buildSource(loc.source),
                    start: buildPosition(loc.start.line, loc.start.column),
                    end: buildPosition(loc.end.line, loc.end.column)
                };
            } else {
                return SYNTHETIC;
            }
        } else {
            var startLine = args[0],
                startColumn = args[1],
                endLine = args[2],
                endColumn = args[3],
                source = args[4];

            return {
                source: buildSource(source),
                start: buildPosition(startLine, startColumn),
                end: buildPosition(endLine, endColumn)
            };
        }
    }
    var b = {
        mustache: buildMustache,
        block: buildBlock,
        partial: buildPartial,
        comment: buildComment,
        mustacheComment: buildMustacheComment,
        element: buildElement,
        elementModifier: buildElementModifier,
        attr: buildAttr,
        text: buildText,
        sexpr: buildSexpr,
        path: buildHead,
        concat: buildConcat,
        hash: buildHash,
        pair: buildPair,
        literal: buildLiteral,
        program: buildProgram,
        blockItself: buildBlockItself,
        template: buildTemplate,
        loc: buildLoc,
        pos: buildPosition,
        string: literal('StringLiteral'),
        boolean: literal('BooleanLiteral'),
        number: literal('NumberLiteral'),
        undefined: function (_undefined) {
            function undefined() {
                return _undefined.apply(this, arguments);
            }

            undefined.toString = function () {
                return _undefined.toString();
            };

            return undefined;
        }(function () {
            return buildLiteral('UndefinedLiteral', undefined);
        }),
        null: function _null() {
            return buildLiteral('NullLiteral', null);
        }
    };
    function literal(type) {
        return function (value) {
            return buildLiteral(type, value);
        };
    }

    /**
     * Subclass of `Error` with additional information
     * about location of incorrect markup.
     */
    var SyntaxError = function () {
        SyntaxError.prototype = Object.create(Error.prototype);
        SyntaxError.prototype.constructor = SyntaxError;
        function SyntaxError(message, location) {
            var error = Error.call(this, message);
            this.message = message;
            this.stack = error.stack;
            this.location = location;
        }
        return SyntaxError;
    }();

    // Regex to validate the identifier for block parameters.
    // Based on the ID validation regex in Handlebars.
    var ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/;
    // Checks the element's attributes to see if it uses block params.
    // If it does, registers the block params with the program and
    // removes the corresponding attributes from the element.
    function parseElementBlockParams(element) {
        var params = parseBlockParams(element);
        if (params) element.blockParams = params;
    }
    function parseBlockParams(element) {
        var l = element.attributes.length;
        var attrNames = [];
        for (var i = 0; i < l; i++) {
            attrNames.push(element.attributes[i].name);
        }
        var asIndex = attrNames.indexOf('as');
        if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
            // Some basic validation, since we're doing the parsing ourselves
            var paramsString = attrNames.slice(asIndex).join(' ');
            if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
                throw new SyntaxError("Invalid block parameters syntax: '" + paramsString + "'", element.loc);
            }
            var params = [];
            for (var _i = asIndex + 1; _i < l; _i++) {
                var param = attrNames[_i].replace(/\|/g, '');
                if (param !== '') {
                    if (ID_INVERSE_PATTERN.test(param)) {
                        throw new SyntaxError("Invalid identifier for block parameters: '" + param + "' in '" + paramsString + "'", element.loc);
                    }
                    params.push(param);
                }
            }
            if (params.length === 0) {
                throw new SyntaxError("Cannot use zero block parameters: '" + paramsString + "'", element.loc);
            }
            element.attributes = element.attributes.slice(0, asIndex);
            return params;
        }
        return null;
    }
    function childrenFor(node) {
        switch (node.type) {
            case 'Block':
            case 'Template':
                return node.body;
            case 'ElementNode':
                return node.children;
        }
    }
    function appendChild(parent, node) {
        childrenFor(parent).push(node);
    }
    function isLiteral(path) {
        return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
    }
    function printLiteral(literal) {
        if (literal.type === 'UndefinedLiteral') {
            return 'undefined';
        } else {
            return JSON.stringify(literal.value);
        }
    }

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    var Parser = function () {
        function Parser(source) {
            var entityParser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new simpleHtmlTokenizer.EntityParser(simpleHtmlTokenizer.HTML5NamedCharRefs);

            _classCallCheck(this, Parser);

            this.elementStack = [];
            this.currentAttribute = null;
            this.currentNode = null;
            this.source = source.split(/(?:\r\n?|\n)/g);
            this.tokenizer = new simpleHtmlTokenizer.EventedTokenizer(this, entityParser);
        }

        Parser.prototype.acceptTemplate = function acceptTemplate(node) {
            return this[node.type](node);
        };

        Parser.prototype.acceptNode = function acceptNode(node) {
            return this[node.type](node);
        };

        Parser.prototype.currentElement = function currentElement() {
            return this.elementStack[this.elementStack.length - 1];
        };

        Parser.prototype.sourceForNode = function sourceForNode(node, endNode) {
            var firstLine = node.loc.start.line - 1;
            var currentLine = firstLine - 1;
            var firstColumn = node.loc.start.column;
            var string = [];
            var line = void 0;
            var lastLine = void 0;
            var lastColumn = void 0;
            if (endNode) {
                lastLine = endNode.loc.end.line - 1;
                lastColumn = endNode.loc.end.column;
            } else {
                lastLine = node.loc.end.line - 1;
                lastColumn = node.loc.end.column;
            }
            while (currentLine < lastLine) {
                currentLine++;
                line = this.source[currentLine];
                if (currentLine === firstLine) {
                    if (firstLine === lastLine) {
                        string.push(line.slice(firstColumn, lastColumn));
                    } else {
                        string.push(line.slice(firstColumn));
                    }
                } else if (currentLine === lastLine) {
                    string.push(line.slice(0, lastColumn));
                } else {
                    string.push(line);
                }
            }
            return string.join('\n');
        };

        _createClass(Parser, [{
            key: 'currentAttr',
            get: function get() {
                return this.currentAttribute;
            }
        }, {
            key: 'currentTag',
            get: function get() {
                var node = this.currentNode;

                return node;
            }
        }, {
            key: 'currentStartTag',
            get: function get() {
                var node = this.currentNode;

                return node;
            }
        }, {
            key: 'currentEndTag',
            get: function get() {
                var node = this.currentNode;

                return node;
            }
        }, {
            key: 'currentComment',
            get: function get() {
                var node = this.currentNode;

                return node;
            }
        }, {
            key: 'currentData',
            get: function get() {
                var node = this.currentNode;

                return node;
            }
        }]);

        return Parser;
    }();

    var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
    var HandlebarsNodeVisitors = function (_Parser) {
        _inherits(HandlebarsNodeVisitors, _Parser);

        function HandlebarsNodeVisitors() {
            _classCallCheck$1(this, HandlebarsNodeVisitors);

            var _this = _possibleConstructorReturn(this, _Parser.apply(this, arguments));

            _this.cursorCount = 0;
            return _this;
        }

        HandlebarsNodeVisitors.prototype.cursor = function cursor() {
            return '%cursor:' + this.cursorCount++ + '%';
        };

        HandlebarsNodeVisitors.prototype.Program = function Program(program) {
            var body = [];
            this.cursorCount = 0;
            var node = void 0;
            if (this.isTopLevel) {
                node = b.template(body, program.blockParams, program.loc);
            } else {
                node = b.blockItself(body, program.blockParams, program.chained, program.loc);
            }
            var i = void 0,
                l = program.body.length;
            this.elementStack.push(node);
            if (l === 0) {
                return this.elementStack.pop();
            }
            for (i = 0; i < l; i++) {
                this.acceptNode(program.body[i]);
            }
            // Ensure that that the element stack is balanced properly.
            var poppedNode = this.elementStack.pop();
            if (poppedNode !== node) {
                var elementNode = poppedNode;
                throw new SyntaxError('Unclosed element `' + elementNode.tag + '` (on line ' + elementNode.loc.start.line + ').', elementNode.loc);
            }
            return node;
        };

        HandlebarsNodeVisitors.prototype.BlockStatement = function BlockStatement(block) {
            if (this.tokenizer['state'] === 'comment') {
                this.appendToCommentData(this.sourceForNode(block));
                return;
            }
            if (this.tokenizer['state'] !== 'comment' && this.tokenizer['state'] !== 'data' && this.tokenizer['state'] !== 'beforeData') {
                throw new SyntaxError('A block may only be used inside an HTML element or another block.', block.loc);
            }

            var _acceptCallNodes = acceptCallNodes(this, block),
                path = _acceptCallNodes.path,
                params = _acceptCallNodes.params,
                hash = _acceptCallNodes.hash;

            var program = this.Program(block.program);
            var inverse = block.inverse ? this.Program(block.inverse) : null;
            if (path.original === 'in-element') {
                hash = addInElementHash(this.cursor(), hash, block.loc);
            }
            var node = b.block(path, params, hash, program, inverse, block.loc, block.openStrip, block.inverseStrip, block.closeStrip);
            var parentProgram = this.currentElement();
            appendChild(parentProgram, node);
        };

        HandlebarsNodeVisitors.prototype.MustacheStatement = function MustacheStatement(rawMustache) {
            var tokenizer = this.tokenizer;

            if (tokenizer.state === 'comment') {
                this.appendToCommentData(this.sourceForNode(rawMustache));
                return;
            }
            var mustache = void 0;
            var escaped = rawMustache.escaped,
                loc = rawMustache.loc,
                strip = rawMustache.strip;

            if (isLiteral(rawMustache.path)) {
                mustache = {
                    type: 'MustacheStatement',
                    path: this.acceptNode(rawMustache.path),
                    params: [],
                    hash: b.hash(),
                    escaped: escaped,
                    loc: loc,
                    strip: strip
                };
            } else {
                var _acceptCallNodes2 = acceptCallNodes(this, rawMustache),
                    path = _acceptCallNodes2.path,
                    params = _acceptCallNodes2.params,
                    hash = _acceptCallNodes2.hash;

                mustache = b.mustache(path, params, hash, !escaped, loc, strip);
            }
            switch (tokenizer.state) {
                // Tag helpers
                case "tagOpen" /* tagOpen */:
                case "tagName" /* tagName */:
                    throw new SyntaxError('Cannot use mustaches in an elements tagname: `' + this.sourceForNode(rawMustache, rawMustache.path) + '` at L' + loc.start.line + ':C' + loc.start.column, mustache.loc);
                case "beforeAttributeName" /* beforeAttributeName */:
                    addElementModifier(this.currentStartTag, mustache);
                    break;
                case "attributeName" /* attributeName */:
                case "afterAttributeName" /* afterAttributeName */:
                    this.beginAttributeValue(false);
                    this.finishAttributeValue();
                    addElementModifier(this.currentStartTag, mustache);
                    tokenizer.transitionTo("beforeAttributeName" /* beforeAttributeName */);
                    break;
                case "afterAttributeValueQuoted" /* afterAttributeValueQuoted */:
                    addElementModifier(this.currentStartTag, mustache);
                    tokenizer.transitionTo("beforeAttributeName" /* beforeAttributeName */);
                    break;
                // Attribute values
                case "beforeAttributeValue" /* beforeAttributeValue */:
                    this.beginAttributeValue(false);
                    appendDynamicAttributeValuePart(this.currentAttribute, mustache);
                    tokenizer.transitionTo("attributeValueUnquoted" /* attributeValueUnquoted */);
                    break;
                case "attributeValueDoubleQuoted" /* attributeValueDoubleQuoted */:
                case "attributeValueSingleQuoted" /* attributeValueSingleQuoted */:
                case "attributeValueUnquoted" /* attributeValueUnquoted */:
                    appendDynamicAttributeValuePart(this.currentAttribute, mustache);
                    break;
                // TODO: Only append child when the tokenizer state makes
                // sense to do so, otherwise throw an error.
                default:
                    appendChild(this.currentElement(), mustache);
            }
            return mustache;
        };

        HandlebarsNodeVisitors.prototype.ContentStatement = function ContentStatement(content) {
            updateTokenizerLocation(this.tokenizer, content);
            this.tokenizer.tokenizePart(content.value);
            this.tokenizer.flushData();
        };

        HandlebarsNodeVisitors.prototype.CommentStatement = function CommentStatement(rawComment) {
            var tokenizer = this.tokenizer;

            if (tokenizer.state === "comment" /* comment */) {
                    this.appendToCommentData(this.sourceForNode(rawComment));
                    return null;
                }
            var value = rawComment.value,
                loc = rawComment.loc;

            var comment = b.mustacheComment(value, loc);
            switch (tokenizer.state) {
                case "beforeAttributeName" /* beforeAttributeName */:
                    this.currentStartTag.comments.push(comment);
                    break;
                case "beforeData" /* beforeData */:
                case "data" /* data */:
                    appendChild(this.currentElement(), comment);
                    break;
                default:
                    throw new SyntaxError('Using a Handlebars comment when in the `' + tokenizer['state'] + '` state is not supported: "' + comment.value + '" on line ' + loc.start.line + ':' + loc.start.column, rawComment.loc);
            }
            return comment;
        };

        HandlebarsNodeVisitors.prototype.PartialStatement = function PartialStatement(partial) {
            var loc = partial.loc;

            throw new SyntaxError('Handlebars partials are not supported: "' + this.sourceForNode(partial, partial.name) + '" at L' + loc.start.line + ':C' + loc.start.column, partial.loc);
        };

        HandlebarsNodeVisitors.prototype.PartialBlockStatement = function PartialBlockStatement(partialBlock) {
            var loc = partialBlock.loc;

            throw new SyntaxError('Handlebars partial blocks are not supported: "' + this.sourceForNode(partialBlock, partialBlock.name) + '" at L' + loc.start.line + ':C' + loc.start.column, partialBlock.loc);
        };

        HandlebarsNodeVisitors.prototype.Decorator = function Decorator(decorator) {
            var loc = decorator.loc;

            throw new SyntaxError('Handlebars decorators are not supported: "' + this.sourceForNode(decorator, decorator.path) + '" at L' + loc.start.line + ':C' + loc.start.column, decorator.loc);
        };

        HandlebarsNodeVisitors.prototype.DecoratorBlock = function DecoratorBlock(decoratorBlock) {
            var loc = decoratorBlock.loc;

            throw new SyntaxError('Handlebars decorator blocks are not supported: "' + this.sourceForNode(decoratorBlock, decoratorBlock.path) + '" at L' + loc.start.line + ':C' + loc.start.column, decoratorBlock.loc);
        };

        HandlebarsNodeVisitors.prototype.SubExpression = function SubExpression(sexpr) {
            var _acceptCallNodes3 = acceptCallNodes(this, sexpr),
                path = _acceptCallNodes3.path,
                params = _acceptCallNodes3.params,
                hash = _acceptCallNodes3.hash;

            return b.sexpr(path, params, hash, sexpr.loc);
        };

        HandlebarsNodeVisitors.prototype.PathExpression = function PathExpression(path) {
            var original = path.original,
                loc = path.loc;

            var parts = void 0;
            if (original.indexOf('/') !== -1) {
                if (original.slice(0, 2) === './') {
                    throw new SyntaxError('Using "./" is not supported in Glimmer and unnecessary: "' + path.original + '" on line ' + loc.start.line + '.', path.loc);
                }
                if (original.slice(0, 3) === '../') {
                    throw new SyntaxError('Changing context using "../" is not supported in Glimmer: "' + path.original + '" on line ' + loc.start.line + '.', path.loc);
                }
                if (original.indexOf('.') !== -1) {
                    throw new SyntaxError('Mixing \'.\' and \'/\' in paths is not supported in Glimmer; use only \'.\' to separate property paths: "' + path.original + '" on line ' + loc.start.line + '.', path.loc);
                }
                parts = [path.parts.join('/')];
            } else if (original === '.') {
                var locationInfo = 'L' + loc.start.line + ':C' + loc.start.column;
                throw new SyntaxError('\'.\' is not a supported path in Glimmer; check for a path with a trailing \'.\' at ' + locationInfo + '.', path.loc);
            } else {
                parts = path.parts;
            }
            var thisHead = false;
            // This is to fix a bug in the Handlebars AST where the path expressions in
            // `{{this.foo}}` (and similarly `{{foo-bar this.foo named=this.foo}}` etc)
            // are simply turned into `{{foo}}`. The fix is to push it back onto the
            // parts array and let the runtime see the difference. However, we cannot
            // simply use the string `this` as it means literally the property called
            // "this" in the current context (it can be expressed in the syntax as
            // `{{[this]}}`, where the square bracket are generally for this kind of
            // escaping – such as `{{foo.["bar.baz"]}}` would mean lookup a property
            // named literally "bar.baz" on `this.foo`). By convention, we use `null`
            // for this purpose.
            if (original.match(/^this(\..+)?$/)) {
                thisHead = true;
            }
            return {
                type: 'PathExpression',
                original: path.original,
                this: thisHead,
                parts: parts,
                data: path.data,
                loc: path.loc
            };
        };

        HandlebarsNodeVisitors.prototype.Hash = function Hash(hash) {
            var pairs = [];
            for (var i = 0; i < hash.pairs.length; i++) {
                var pair = hash.pairs[i];
                pairs.push(b.pair(pair.key, this.acceptNode(pair.value), pair.loc));
            }
            return b.hash(pairs, hash.loc);
        };

        HandlebarsNodeVisitors.prototype.StringLiteral = function StringLiteral(string) {
            return b.literal('StringLiteral', string.value, string.loc);
        };

        HandlebarsNodeVisitors.prototype.BooleanLiteral = function BooleanLiteral(boolean) {
            return b.literal('BooleanLiteral', boolean.value, boolean.loc);
        };

        HandlebarsNodeVisitors.prototype.NumberLiteral = function NumberLiteral(number) {
            return b.literal('NumberLiteral', number.value, number.loc);
        };

        HandlebarsNodeVisitors.prototype.UndefinedLiteral = function UndefinedLiteral(undef) {
            return b.literal('UndefinedLiteral', undefined, undef.loc);
        };

        HandlebarsNodeVisitors.prototype.NullLiteral = function NullLiteral(nul) {
            return b.literal('NullLiteral', null, nul.loc);
        };

        _createClass$1(HandlebarsNodeVisitors, [{
            key: 'isTopLevel',
            get: function get() {
                return this.elementStack.length === 0;
            }
        }]);

        return HandlebarsNodeVisitors;
    }(Parser);
    function calculateRightStrippedOffsets(original, value) {
        if (value === '') {
            // if it is empty, just return the count of newlines
            // in original
            return {
                lines: original.split('\n').length - 1,
                columns: 0
            };
        }
        // otherwise, return the number of newlines prior to
        // `value`
        var difference = original.split(value)[0];
        var lines = difference.split(/\n/);
        var lineCount = lines.length - 1;
        return {
            lines: lineCount,
            columns: lines[lineCount].length
        };
    }
    function updateTokenizerLocation(tokenizer, content) {
        var line = content.loc.start.line;
        var column = content.loc.start.column;
        var offsets = calculateRightStrippedOffsets(content.original, content.value);
        line = line + offsets.lines;
        if (offsets.lines) {
            column = offsets.columns;
        } else {
            column = column + offsets.columns;
        }
        tokenizer.line = line;
        tokenizer.column = column;
    }
    function acceptCallNodes(compiler, node) {
        var path = compiler.PathExpression(node.path);
        var params = node.params ? node.params.map(function (e) {
            return compiler.acceptNode(e);
        }) : [];
        var hash = node.hash ? compiler.Hash(node.hash) : b.hash();
        return { path: path, params: params, hash: hash };
    }
    function addElementModifier(element, mustache) {
        var path = mustache.path,
            params = mustache.params,
            hash = mustache.hash,
            loc = mustache.loc;

        if (isLiteral(path)) {
            var _modifier = '{{' + printLiteral(path) + '}}';
            var tag = '<' + element.name + ' ... ' + _modifier + ' ...';
            throw new SyntaxError('In ' + tag + ', ' + _modifier + ' is not a valid modifier: "' + path.original + '" on line ' + (loc && loc.start.line) + '.', mustache.loc);
        }
        var modifier = b.elementModifier(path, params, hash, loc);
        element.modifiers.push(modifier);
    }
    function addInElementHash(cursor, hash, loc) {
        var hasInsertBefore = false;
        hash.pairs.forEach(function (pair) {
            if (pair.key === 'guid') {
                throw new SyntaxError('Cannot pass `guid` from user space', loc);
            }
            if (pair.key === 'insertBefore') {
                hasInsertBefore = true;
            }
        });
        var guid = b.literal('StringLiteral', cursor);
        var guidPair = b.pair('guid', guid);
        hash.pairs.unshift(guidPair);
        if (!hasInsertBefore) {
            var undefinedLiteral = b.literal('UndefinedLiteral', undefined);
            var beforeSibling = b.pair('insertBefore', undefinedLiteral);
            hash.pairs.push(beforeSibling);
        }
        return hash;
    }
    function appendDynamicAttributeValuePart(attribute, part) {
        attribute.isDynamic = true;
        attribute.parts.push(part);
    }

    // ensure stays in sync with typing
    // ParentNode and ChildKey types are derived from VisitorKeysMap
    var visitorKeys = {
        Program: util.tuple('body'),
        Template: util.tuple('body'),
        Block: util.tuple('body'),
        MustacheStatement: util.tuple('path', 'params', 'hash'),
        BlockStatement: util.tuple('path', 'params', 'hash', 'program', 'inverse'),
        ElementModifierStatement: util.tuple('path', 'params', 'hash'),
        PartialStatement: util.tuple('name', 'params', 'hash'),
        CommentStatement: util.tuple(),
        MustacheCommentStatement: util.tuple(),
        ElementNode: util.tuple('attributes', 'modifiers', 'children', 'comments'),
        AttrNode: util.tuple('value'),
        TextNode: util.tuple(),
        ConcatStatement: util.tuple('parts'),
        SubExpression: util.tuple('path', 'params', 'hash'),
        PathExpression: util.tuple(),
        StringLiteral: util.tuple(),
        BooleanLiteral: util.tuple(),
        NumberLiteral: util.tuple(),
        NullLiteral: util.tuple(),
        UndefinedLiteral: util.tuple(),
        Hash: util.tuple('pairs'),
        HashPair: util.tuple('value')
    };

    var TraversalError = function () {
        TraversalError.prototype = Object.create(Error.prototype);
        TraversalError.prototype.constructor = TraversalError;
        function TraversalError(message, node, parent, key) {
            var error = Error.call(this, message);
            this.key = key;
            this.message = message;
            this.node = node;
            this.parent = parent;
            this.stack = error.stack;
        }
        return TraversalError;
    }();
    function cannotRemoveNode(node, parent, key) {
        return new TraversalError('Cannot remove a node unless it is part of an array', node, parent, key);
    }
    function cannotReplaceNode(node, parent, key) {
        return new TraversalError('Cannot replace a node with multiple nodes unless it is part of an array', node, parent, key);
    }
    function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
        return new TraversalError('Replacing and removing in key handlers is not yet supported.', node, null, key);
    }

    var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Path = function () {
        function Path(node) {
            var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var parentKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            _classCallCheck$2(this, Path);

            this.node = node;
            this.parent = parent;
            this.parentKey = parentKey;
        }

        Path.prototype.parents = function parents() {
            var _this = this,
                _ref;

            return _ref = {}, _ref[Symbol.iterator] = function () {
                return new PathParentsIterator(_this);
            }, _ref;
        };

        _createClass$2(Path, [{
            key: "parentNode",
            get: function get() {
                return this.parent ? this.parent.node : null;
            }
        }]);

        return Path;
    }();

    var PathParentsIterator = function () {
        function PathParentsIterator(path) {
            _classCallCheck$2(this, PathParentsIterator);

            this.path = path;
        }

        PathParentsIterator.prototype.next = function next() {
            if (this.path.parent) {
                this.path = this.path.parent;
                return { done: false, value: this.path };
            } else {
                return { done: true, value: null };
            }
        };

        return PathParentsIterator;
    }();

    function getEnterFunction(handler) {
        if (typeof handler === 'function') {
            return handler;
        } else {
            return handler.enter;
        }
    }
    function getExitFunction(handler) {
        if (typeof handler === 'function') {
            return undefined;
        } else {
            return handler.exit;
        }
    }
    function getKeyHandler(handler, key) {
        var keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;
        if (keyVisitor === undefined) return;
        var keyHandler = keyVisitor[key];
        if (keyHandler !== undefined) {
            return keyHandler;
        }
        return keyVisitor.All;
    }
    function getNodeHandler(visitor, nodeType) {
        if (nodeType === 'Template' || nodeType === 'Block') {
            if (visitor.Program) {
                return visitor.Program;
            }
        }
        var handler = visitor[nodeType];
        if (handler !== undefined) {
            return handler;
        }
        return visitor.All;
    }
    function visitNode(visitor, path) {
        var node = path.node,
            parent = path.parent,
            parentKey = path.parentKey;

        var handler = getNodeHandler(visitor, node.type);
        var enter = void 0;
        var exit = void 0;
        if (handler !== undefined) {
            enter = getEnterFunction(handler);
            exit = getExitFunction(handler);
        }
        var result = void 0;
        if (enter !== undefined) {
            result = enter(node, path);
        }
        if (result !== undefined && result !== null) {
            if (JSON.stringify(node) === JSON.stringify(result)) {
                result = undefined;
            } else if (Array.isArray(result)) {
                visitArray(visitor, result, parent, parentKey);
                return result;
            } else {
                var _path = new Path(result, parent, parentKey);
                return visitNode(visitor, _path) || result;
            }
        }
        if (result === undefined) {
            var keys = visitorKeys[node.type];
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                // we know if it has child keys we can widen to a ParentNode
                visitKey(visitor, handler, path, key);
            }
            if (exit !== undefined) {
                result = exit(node, path);
            }
        }
        return result;
    }
    function get(node, key) {
        return node[key];
    }
    function set(node, key, value) {
        node[key] = value;
    }
    function visitKey(visitor, handler, path, key) {
        var node = path.node;

        var value = get(node, key);
        if (!value) {
            return;
        }
        var keyEnter = void 0;
        var keyExit = void 0;
        if (handler !== undefined) {
            var keyHandler = getKeyHandler(handler, key);
            if (keyHandler !== undefined) {
                keyEnter = getEnterFunction(keyHandler);
                keyExit = getExitFunction(keyHandler);
            }
        }
        if (keyEnter !== undefined) {
            if (keyEnter(node, key) !== undefined) {
                throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
            }
        }
        if (Array.isArray(value)) {
            visitArray(visitor, value, path, key);
        } else {
            var keyPath = new Path(value, path, key);
            var result = visitNode(visitor, keyPath);
            if (result !== undefined) {
                // TODO: dynamically check the results by having a table of
                // expected node types in value space, not just type space
                assignKey(node, key, value, result);
            }
        }
        if (keyExit !== undefined) {
            if (keyExit(node, key) !== undefined) {
                throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
            }
        }
    }
    function visitArray(visitor, array, parent, parentKey) {
        for (var i = 0; i < array.length; i++) {
            var node = array[i];
            var path = new Path(node, parent, parentKey);
            var result = visitNode(visitor, path);
            if (result !== undefined) {
                i += spliceArray(array, i, result) - 1;
            }
        }
    }
    function assignKey(node, key, value, result) {
        if (result === null) {
            throw cannotRemoveNode(value, node, key);
        } else if (Array.isArray(result)) {
            if (result.length === 1) {
                set(node, key, result[0]);
            } else {
                if (result.length === 0) {
                    throw cannotRemoveNode(value, node, key);
                } else {
                    throw cannotReplaceNode(value, node, key);
                }
            }
        } else {
            set(node, key, result);
        }
    }
    function spliceArray(array, index, result) {
        if (result === null) {
            array.splice(index, 1);
            return 0;
        } else if (Array.isArray(result)) {
            array.splice.apply(array, [index, 1].concat(result));
            return result.length;
        } else {
            array.splice(index, 1, result);
            return 1;
        }
    }
    function traverse(node, visitor) {
        var path = new Path(node);
        visitNode(visitor, path);
    }

    var ATTR_VALUE_REGEX_TEST = /[\xA0"&]/;
    var ATTR_VALUE_REGEX_REPLACE = new RegExp(ATTR_VALUE_REGEX_TEST.source, 'g');
    var TEXT_REGEX_TEST = /[\xA0&<>]/;
    var TEXT_REGEX_REPLACE = new RegExp(TEXT_REGEX_TEST.source, 'g');
    function attrValueReplacer(char) {
        switch (char.charCodeAt(0)) {
            case 160 /* NBSP */:
                return '&nbsp;';
            case 34 /* QUOT */:
                return '&quot;';
            case 38 /* AMP */:
                return '&amp;';
            default:
                return char;
        }
    }
    function textReplacer(char) {
        switch (char.charCodeAt(0)) {
            case 160 /* NBSP */:
                return '&nbsp;';
            case 38 /* AMP */:
                return '&amp;';
            case 60 /* LT */:
                return '&lt;';
            case 62 /* GT */:
                return '&gt;';
            default:
                return char;
        }
    }
    function escapeAttrValue(attrValue) {
        if (ATTR_VALUE_REGEX_TEST.test(attrValue)) {
            return attrValue.replace(ATTR_VALUE_REGEX_REPLACE, attrValueReplacer);
        }
        return attrValue;
    }
    function escapeText(text) {
        if (TEXT_REGEX_TEST.test(text)) {
            return text.replace(TEXT_REGEX_REPLACE, textReplacer);
        }
        return text;
    }

    function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    var NON_WHITESPACE = /\S/;

    var Printer = function () {
        function Printer(options) {
            _classCallCheck$3(this, Printer);

            this.buffer = '';
            this.options = options;
        }
        /*
          This is used by _all_ methods on this Printer class that add to `this.buffer`,
          it allows consumers of the printer to use alternate string representations for
          a given node.
             The primary use case for this are things like source -> source codemod utilities.
          For example, ember-template-recast attempts to always preserve the original string
          formatting in each AST node if no modifications are made to it.
        */


        Printer.prototype.handledByOverride = function handledByOverride(node) {
            var ensureLeadingWhitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (this.options.override !== undefined) {
                var result = this.options.override(node, this.options);
                if (typeof result === 'string') {
                    if (ensureLeadingWhitespace && NON_WHITESPACE.test(result[0])) {
                        result = ' ' + result;
                    }
                    this.buffer += result;
                    return true;
                }
            }
            return false;
        };

        Printer.prototype.Node = function Node(node) {
            switch (node.type) {
                case 'MustacheStatement':
                case 'BlockStatement':
                case 'PartialStatement':
                case 'MustacheCommentStatement':
                case 'CommentStatement':
                case 'TextNode':
                case 'ElementNode':
                case 'AttrNode':
                case 'Block':
                case 'Template':
                    return this.TopLevelStatement(node);
                case 'StringLiteral':
                case 'BooleanLiteral':
                case 'NumberLiteral':
                case 'UndefinedLiteral':
                case 'NullLiteral':
                case 'PathExpression':
                case 'SubExpression':
                    return this.Expression(node);
                case 'Program':
                    return this.Block(node);
                case 'ConcatStatement':
                    // should have an AttrNode parent
                    return this.ConcatStatement(node);
                case 'Hash':
                    return this.Hash(node);
                case 'HashPair':
                    return this.HashPair(node);
                case 'ElementModifierStatement':
                    return this.ElementModifierStatement(node);
            }
            return unreachable(node, 'Node');
        };

        Printer.prototype.Expression = function Expression(expression) {
            switch (expression.type) {
                case 'StringLiteral':
                case 'BooleanLiteral':
                case 'NumberLiteral':
                case 'UndefinedLiteral':
                case 'NullLiteral':
                    return this.Literal(expression);
                case 'PathExpression':
                    return this.PathExpression(expression);
                case 'SubExpression':
                    return this.SubExpression(expression);
            }
            return unreachable(expression, 'Expression');
        };

        Printer.prototype.Literal = function Literal(literal) {
            switch (literal.type) {
                case 'StringLiteral':
                    return this.StringLiteral(literal);
                case 'BooleanLiteral':
                    return this.BooleanLiteral(literal);
                case 'NumberLiteral':
                    return this.NumberLiteral(literal);
                case 'UndefinedLiteral':
                    return this.UndefinedLiteral(literal);
                case 'NullLiteral':
                    return this.NullLiteral(literal);
            }
            return unreachable(literal, 'Literal');
        };

        Printer.prototype.TopLevelStatement = function TopLevelStatement(statement) {
            switch (statement.type) {
                case 'MustacheStatement':
                    return this.MustacheStatement(statement);
                case 'BlockStatement':
                    return this.BlockStatement(statement);
                case 'PartialStatement':
                    return this.PartialStatement(statement);
                case 'MustacheCommentStatement':
                    return this.MustacheCommentStatement(statement);
                case 'CommentStatement':
                    return this.CommentStatement(statement);
                case 'TextNode':
                    return this.TextNode(statement);
                case 'ElementNode':
                    return this.ElementNode(statement);
                case 'Block':
                case 'Template':
                    return this.Block(statement);
                case 'AttrNode':
                    // should have element
                    return this.AttrNode(statement);
            }
            unreachable(statement, 'TopLevelStatement');
        };

        Printer.prototype.Block = function Block(block) {
            /*
              When processing a template like:
                   ```hbs
              {{#if whatever}}
                whatever
              {{else if somethingElse}}
                something else
              {{else}}
                fallback
              {{/if}}
              ```
                   The AST still _effectively_ looks like:
                   ```hbs
              {{#if whatever}}
                whatever
              {{else}}{{#if somethingElse}}
                something else
              {{else}}
                fallback
              {{/if}}{{/if}}
              ```
                   The only way we can tell if that is the case is by checking for
              `block.chained`, but unfortunately when the actual statements are
              processed the `block.body[0]` node (which will always be a
              `BlockStatement`) has no clue that its anscestor `Block` node was
              chained.
                   This "forwards" the `chained` setting so that we can check
              it later when processing the `BlockStatement`.
            */
            if (block.chained) {
                var firstChild = block.body[0];
                firstChild.chained = true;
            }
            if (this.handledByOverride(block)) {
                return;
            }
            this.TopLevelStatements(block.body);
        };

        Printer.prototype.TopLevelStatements = function TopLevelStatements(statements) {
            var _this = this;

            statements.forEach(function (statement) {
                return _this.TopLevelStatement(statement);
            });
        };

        Printer.prototype.ElementNode = function ElementNode(el) {
            if (this.handledByOverride(el)) {
                return;
            }
            this.OpenElementNode(el);
            this.TopLevelStatements(el.children);
            this.CloseElementNode(el);
        };

        Printer.prototype.OpenElementNode = function OpenElementNode(el) {
            var _this2 = this;

            this.buffer += '<' + el.tag;
            if (el.attributes.length) {
                el.attributes.forEach(function (attr) {
                    _this2.buffer += ' ';
                    _this2.AttrNode(attr);
                });
            }
            if (el.modifiers.length) {
                el.modifiers.forEach(function (mod) {
                    _this2.buffer += ' ';
                    _this2.ElementModifierStatement(mod);
                });
            }
            if (el.comments.length) {
                el.comments.forEach(function (comment) {
                    _this2.buffer += ' ';
                    _this2.MustacheCommentStatement(comment);
                });
            }
            if (el.blockParams.length) {
                this.BlockParams(el.blockParams);
            }
            if (el.selfClosing) {
                this.buffer += ' /';
            }
            this.buffer += '>';
        };

        Printer.prototype.CloseElementNode = function CloseElementNode(el) {
            if (el.selfClosing || voidMap[el.tag.toLowerCase()]) {
                return;
            }
            this.buffer += '</' + el.tag + '>';
        };

        Printer.prototype.AttrNode = function AttrNode(attr) {
            if (this.handledByOverride(attr)) {
                return;
            }
            var name = attr.name,
                value = attr.value;

            this.buffer += name;
            if (value.type !== 'TextNode' || value.chars.length > 0) {
                this.buffer += '=';
                this.AttrNodeValue(value);
            }
        };

        Printer.prototype.AttrNodeValue = function AttrNodeValue(value) {
            if (value.type === 'TextNode') {
                this.buffer += '"';
                this.TextNode(value, true);
                this.buffer += '"';
            } else {
                this.Node(value);
            }
        };

        Printer.prototype.TextNode = function TextNode(text, isAttr) {
            if (this.handledByOverride(text)) {
                return;
            }
            if (this.options.entityEncoding === 'raw') {
                this.buffer += text.chars;
            } else if (isAttr) {
                this.buffer += escapeAttrValue(text.chars);
            } else {
                this.buffer += escapeText(text.chars);
            }
        };

        Printer.prototype.MustacheStatement = function MustacheStatement(mustache) {
            if (this.handledByOverride(mustache)) {
                return;
            }
            this.buffer += mustache.escaped ? '{{' : '{{{';
            if (mustache.strip.open) {
                this.buffer += '~';
            }
            this.Expression(mustache.path);
            this.Params(mustache.params);
            this.Hash(mustache.hash);
            if (mustache.strip.close) {
                this.buffer += '~';
            }
            this.buffer += mustache.escaped ? '}}' : '}}}';
        };

        Printer.prototype.BlockStatement = function BlockStatement(block) {
            if (this.handledByOverride(block)) {
                return;
            }
            if (block.chained) {
                this.buffer += block.inverseStrip.open ? '{{~' : '{{';
                this.buffer += 'else ';
            } else {
                this.buffer += block.openStrip.open ? '{{~#' : '{{#';
            }
            this.Expression(block.path);
            this.Params(block.params);
            this.Hash(block.hash);
            if (block.program.blockParams.length) {
                this.BlockParams(block.program.blockParams);
            }
            if (block.chained) {
                this.buffer += block.inverseStrip.close ? '~}}' : '}}';
            } else {
                this.buffer += block.openStrip.close ? '~}}' : '}}';
            }
            this.Block(block.program);
            if (block.inverse) {
                if (!block.inverse.chained) {
                    this.buffer += block.inverseStrip.open ? '{{~' : '{{';
                    this.buffer += 'else';
                    this.buffer += block.inverseStrip.close ? '~}}' : '}}';
                }
                this.Block(block.inverse);
            }
            if (!block.chained) {
                this.buffer += block.closeStrip.open ? '{{~/' : '{{/';
                this.Expression(block.path);
                this.buffer += block.closeStrip.close ? '~}}' : '}}';
            }
        };

        Printer.prototype.BlockParams = function BlockParams(blockParams) {
            this.buffer += ' as |' + blockParams.join(' ') + '|';
        };

        Printer.prototype.PartialStatement = function PartialStatement(partial) {
            if (this.handledByOverride(partial)) {
                return;
            }
            this.buffer += '{{>';
            this.Expression(partial.name);
            this.Params(partial.params);
            this.Hash(partial.hash);
            this.buffer += '}}';
        };

        Printer.prototype.ConcatStatement = function ConcatStatement(concat) {
            var _this3 = this;

            if (this.handledByOverride(concat)) {
                return;
            }
            this.buffer += '"';
            concat.parts.forEach(function (part) {
                if (part.type === 'TextNode') {
                    _this3.TextNode(part, true);
                } else {
                    _this3.Node(part);
                }
            });
            this.buffer += '"';
        };

        Printer.prototype.MustacheCommentStatement = function MustacheCommentStatement(comment) {
            if (this.handledByOverride(comment)) {
                return;
            }
            this.buffer += '{{!--' + comment.value + '--}}';
        };

        Printer.prototype.ElementModifierStatement = function ElementModifierStatement(mod) {
            if (this.handledByOverride(mod)) {
                return;
            }
            this.buffer += '{{';
            this.Expression(mod.path);
            this.Params(mod.params);
            this.Hash(mod.hash);
            this.buffer += '}}';
        };

        Printer.prototype.CommentStatement = function CommentStatement(comment) {
            if (this.handledByOverride(comment)) {
                return;
            }
            this.buffer += '<!--' + comment.value + '-->';
        };

        Printer.prototype.PathExpression = function PathExpression(path) {
            if (this.handledByOverride(path)) {
                return;
            }
            this.buffer += path.original;
        };

        Printer.prototype.SubExpression = function SubExpression(sexp) {
            if (this.handledByOverride(sexp)) {
                return;
            }
            this.buffer += '(';
            this.Expression(sexp.path);
            this.Params(sexp.params);
            this.Hash(sexp.hash);
            this.buffer += ')';
        };

        Printer.prototype.Params = function Params(params) {
            var _this4 = this;

            // TODO: implement a top level Params AST node (just like the Hash object)
            // so that this can also be overridden
            if (params.length) {
                params.forEach(function (param) {
                    _this4.buffer += ' ';
                    _this4.Expression(param);
                });
            }
        };

        Printer.prototype.Hash = function Hash(hash) {
            var _this5 = this;

            if (this.handledByOverride(hash, true)) {
                return;
            }
            hash.pairs.forEach(function (pair) {
                _this5.buffer += ' ';
                _this5.HashPair(pair);
            });
        };

        Printer.prototype.HashPair = function HashPair(pair) {
            if (this.handledByOverride(pair)) {
                return;
            }
            this.buffer += pair.key;
            this.buffer += '=';
            this.Node(pair.value);
        };

        Printer.prototype.StringLiteral = function StringLiteral(str) {
            if (this.handledByOverride(str)) {
                return;
            }
            this.buffer += JSON.stringify(str.value);
        };

        Printer.prototype.BooleanLiteral = function BooleanLiteral(bool) {
            if (this.handledByOverride(bool)) {
                return;
            }
            this.buffer += bool.value;
        };

        Printer.prototype.NumberLiteral = function NumberLiteral(number) {
            if (this.handledByOverride(number)) {
                return;
            }
            this.buffer += number.value;
        };

        Printer.prototype.UndefinedLiteral = function UndefinedLiteral(node) {
            if (this.handledByOverride(node)) {
                return;
            }
            this.buffer += 'undefined';
        };

        Printer.prototype.NullLiteral = function NullLiteral(node) {
            if (this.handledByOverride(node)) {
                return;
            }
            this.buffer += 'null';
        };

        Printer.prototype.print = function print(node) {
            var options = this.options;

            if (options.override) {
                var result = options.override(node, options);
                if (result !== undefined) {
                    return result;
                }
            }
            this.buffer = '';
            this.Node(node);
            return this.buffer;
        };

        return Printer;
    }();

    function unreachable(node, parentNodeType) {
        var loc = node.loc,
            type = node.type;

        throw new Error('Non-exhaustive node narrowing ' + type + ' @ location: ' + JSON.stringify(loc) + ' for parent ' + parentNodeType);
    }

    function build(ast) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { entityEncoding: 'transformed' };

        if (!ast) {
            return '';
        }
        var printer = new Printer(options);
        return printer.print(ast);
    }

    function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Walker = function () {
        function Walker(order) {
            _classCallCheck$4(this, Walker);

            this.order = order;
            this.stack = [];
        }

        Walker.prototype.visit = function visit(node, callback) {
            if (!node) {
                return;
            }
            this.stack.push(node);
            if (this.order === 'post') {
                this.children(node, callback);
                callback(node, this);
            } else {
                callback(node, this);
                this.children(node, callback);
            }
            this.stack.pop();
        };

        Walker.prototype.children = function children(node, callback) {
            var type = void 0;
            if (node.type === 'Block' || node.type === 'Template' && visitors.Program) {
                type = 'Program';
            } else {
                type = node.type;
            }
            var visitor = visitors[type];
            if (visitor) {
                visitor(this, node, callback);
            }
        };

        return Walker;
    }();

    var visitors = {
        Program: function Program(walker, node, callback) {
            for (var i = 0; i < node.body.length; i++) {
                walker.visit(node.body[i], callback);
            }
        },
        Template: function Template(walker, node, callback) {
            for (var i = 0; i < node.body.length; i++) {
                walker.visit(node.body[i], callback);
            }
        },
        Block: function Block(walker, node, callback) {
            for (var i = 0; i < node.body.length; i++) {
                walker.visit(node.body[i], callback);
            }
        },
        ElementNode: function ElementNode(walker, node, callback) {
            for (var i = 0; i < node.children.length; i++) {
                walker.visit(node.children[i], callback);
            }
        },
        BlockStatement: function BlockStatement(walker, node, callback) {
            walker.visit(node.program, callback);
            walker.visit(node.inverse || null, callback);
        }
    };

    function _defaults$1(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$1(subClass, superClass); }
    var voidMap = Object.create(null);
    var voidTagNames = 'area base br col command embed hr img input keygen link meta param source track wbr';
    voidTagNames.split(' ').forEach(function (tagName) {
        voidMap[tagName] = true;
    });
    var TokenizerEventHandlers = function (_HandlebarsNodeVisito) {
        _inherits$1(TokenizerEventHandlers, _HandlebarsNodeVisito);

        function TokenizerEventHandlers() {
            _classCallCheck$5(this, TokenizerEventHandlers);

            var _this = _possibleConstructorReturn$1(this, _HandlebarsNodeVisito.apply(this, arguments));

            _this.tagOpenLine = 0;
            _this.tagOpenColumn = 0;
            return _this;
        }

        TokenizerEventHandlers.prototype.reset = function reset() {
            this.currentNode = null;
        };
        // Comment


        TokenizerEventHandlers.prototype.beginComment = function beginComment() {
            this.currentNode = b.comment('');
            this.currentNode.loc = {
                source: null,
                start: b.pos(this.tagOpenLine, this.tagOpenColumn),
                end: null
            };
        };

        TokenizerEventHandlers.prototype.appendToCommentData = function appendToCommentData(char) {
            this.currentComment.value += char;
        };

        TokenizerEventHandlers.prototype.finishComment = function finishComment() {
            this.currentComment.loc.end = b.pos(this.tokenizer.line, this.tokenizer.column);
            appendChild(this.currentElement(), this.currentComment);
        };
        // Data


        TokenizerEventHandlers.prototype.beginData = function beginData() {
            this.currentNode = b.text();
            this.currentNode.loc = {
                source: null,
                start: b.pos(this.tokenizer.line, this.tokenizer.column),
                end: null
            };
        };

        TokenizerEventHandlers.prototype.appendToData = function appendToData(char) {
            this.currentData.chars += char;
        };

        TokenizerEventHandlers.prototype.finishData = function finishData() {
            this.currentData.loc.end = b.pos(this.tokenizer.line, this.tokenizer.column);
            appendChild(this.currentElement(), this.currentData);
        };
        // Tags - basic


        TokenizerEventHandlers.prototype.tagOpen = function tagOpen() {
            this.tagOpenLine = this.tokenizer.line;
            this.tagOpenColumn = this.tokenizer.column;
        };

        TokenizerEventHandlers.prototype.beginStartTag = function beginStartTag() {
            this.currentNode = {
                type: 'StartTag',
                name: '',
                attributes: [],
                modifiers: [],
                comments: [],
                selfClosing: false,
                loc: SYNTHETIC
            };
        };

        TokenizerEventHandlers.prototype.beginEndTag = function beginEndTag() {
            this.currentNode = {
                type: 'EndTag',
                name: '',
                attributes: [],
                modifiers: [],
                comments: [],
                selfClosing: false,
                loc: SYNTHETIC
            };
        };

        TokenizerEventHandlers.prototype.finishTag = function finishTag() {
            var _tokenizer = this.tokenizer,
                line = _tokenizer.line,
                column = _tokenizer.column;

            var tag = this.currentTag;
            tag.loc = b.loc(this.tagOpenLine, this.tagOpenColumn, line, column);
            if (tag.type === 'StartTag') {
                this.finishStartTag();
                if (voidMap[tag.name] || tag.selfClosing) {
                    this.finishEndTag(true);
                }
            } else if (tag.type === 'EndTag') {
                this.finishEndTag(false);
            }
        };

        TokenizerEventHandlers.prototype.finishStartTag = function finishStartTag() {
            var _currentStartTag = this.currentStartTag,
                name = _currentStartTag.name,
                attrs = _currentStartTag.attributes,
                modifiers = _currentStartTag.modifiers,
                comments = _currentStartTag.comments,
                selfClosing = _currentStartTag.selfClosing;

            var loc = b.loc(this.tagOpenLine, this.tagOpenColumn);
            var element = b.element({ name: name, selfClosing: selfClosing }, { attrs: attrs, modifiers: modifiers, comments: comments, loc: loc });
            this.elementStack.push(element);
        };

        TokenizerEventHandlers.prototype.finishEndTag = function finishEndTag(isVoid) {
            var tag = this.currentTag;
            var element = this.elementStack.pop();
            var parent = this.currentElement();
            validateEndTag(tag, element, isVoid);
            element.loc.end.line = this.tokenizer.line;
            element.loc.end.column = this.tokenizer.column;
            parseElementBlockParams(element);
            appendChild(parent, element);
        };

        TokenizerEventHandlers.prototype.markTagAsSelfClosing = function markTagAsSelfClosing() {
            this.currentTag.selfClosing = true;
        };
        // Tags - name


        TokenizerEventHandlers.prototype.appendToTagName = function appendToTagName(char) {
            this.currentTag.name += char;
        };
        // Tags - attributes


        TokenizerEventHandlers.prototype.beginAttribute = function beginAttribute() {
            var tag = this.currentTag;
            if (tag.type === 'EndTag') {
                throw new SyntaxError('Invalid end tag: closing tag must not have attributes, ' + ('in `' + tag.name + '` (on line ' + this.tokenizer.line + ').'), tag.loc);
            }
            this.currentAttribute = {
                name: '',
                parts: [],
                isQuoted: false,
                isDynamic: false,
                start: b.pos(this.tokenizer.line, this.tokenizer.column),
                valueStartLine: 0,
                valueStartColumn: 0
            };
        };

        TokenizerEventHandlers.prototype.appendToAttributeName = function appendToAttributeName(char) {
            this.currentAttr.name += char;
        };

        TokenizerEventHandlers.prototype.beginAttributeValue = function beginAttributeValue(isQuoted) {
            this.currentAttr.isQuoted = isQuoted;
            this.currentAttr.valueStartLine = this.tokenizer.line;
            this.currentAttr.valueStartColumn = this.tokenizer.column;
        };

        TokenizerEventHandlers.prototype.appendToAttributeValue = function appendToAttributeValue(char) {
            var parts = this.currentAttr.parts;
            var lastPart = parts[parts.length - 1];
            if (lastPart && lastPart.type === 'TextNode') {
                lastPart.chars += char;
                // update end location for each added char
                lastPart.loc.end.line = this.tokenizer.line;
                lastPart.loc.end.column = this.tokenizer.column;
            } else {
                // initially assume the text node is a single char
                var loc = b.loc(this.tokenizer.line, this.tokenizer.column, this.tokenizer.line, this.tokenizer.column);
                // the tokenizer line/column have already been advanced, correct location info
                if (char === '\n') {
                    loc.start.line -= 1;
                    loc.start.column = lastPart ? lastPart.loc.end.column : this.currentAttr.valueStartColumn;
                } else {
                    loc.start.column -= 1;
                }
                var text = b.text(char, loc);
                parts.push(text);
            }
        };

        TokenizerEventHandlers.prototype.finishAttributeValue = function finishAttributeValue() {
            var _currentAttr = this.currentAttr,
                name = _currentAttr.name,
                parts = _currentAttr.parts,
                isQuoted = _currentAttr.isQuoted,
                isDynamic = _currentAttr.isDynamic,
                valueStartLine = _currentAttr.valueStartLine,
                valueStartColumn = _currentAttr.valueStartColumn;

            var value = assembleAttributeValue(parts, isQuoted, isDynamic, this.tokenizer.line);
            value.loc = b.loc(valueStartLine, valueStartColumn, this.tokenizer.line, this.tokenizer.column);
            var loc = b.loc(this.currentAttr.start.line, this.currentAttr.start.column, this.tokenizer.line, this.tokenizer.column);
            var attribute = b.attr(name, value, loc);
            this.currentStartTag.attributes.push(attribute);
        };

        TokenizerEventHandlers.prototype.reportSyntaxError = function reportSyntaxError(message) {
            throw new SyntaxError('Syntax error at line ' + this.tokenizer.line + ' col ' + this.tokenizer.column + ': ' + message, b.loc(this.tokenizer.line, this.tokenizer.column));
        };

        return TokenizerEventHandlers;
    }(HandlebarsNodeVisitors);
    function assembleAttributeValue(parts, isQuoted, isDynamic, line) {
        if (isDynamic) {
            if (isQuoted) {
                return assembleConcatenatedValue(parts);
            } else {
                if (parts.length === 1 || parts.length === 2 && parts[1].type === 'TextNode' && parts[1].chars === '/') {
                    return parts[0];
                } else {
                    throw new SyntaxError('An unquoted attribute value must be a string or a mustache, ' + 'preceeded by whitespace or a \'=\' character, and ' + ('followed by whitespace, a \'>\' character, or \'/>\' (on line ' + line + ')'), b.loc(line, 0));
                }
            }
        } else {
            return parts.length > 0 ? parts[0] : b.text('');
        }
    }
    function assembleConcatenatedValue(parts) {
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (part.type !== 'MustacheStatement' && part.type !== 'TextNode') {
                throw new SyntaxError('Unsupported node in quoted attribute value: ' + part['type'], part.loc);
            }
        }
        return b.concat(parts);
    }
    function validateEndTag(tag, element, selfClosing) {
        var error = void 0;
        if (voidMap[tag.name] && !selfClosing) {
            // EngTag is also called by StartTag for void and self-closing tags (i.e.
            // <input> or <br />, so we need to check for that here. Otherwise, we would
            // throw an error for those cases.
            error = 'Invalid end tag ' + formatEndTagInfo(tag) + ' (void elements cannot have end tags).';
        } else if (element.tag === undefined) {
            error = 'Closing tag ' + formatEndTagInfo(tag) + ' without an open tag.';
        } else if (element.tag !== tag.name) {
            error = 'Closing tag ' + formatEndTagInfo(tag) + ' did not match last open tag `' + element.tag + '` (on line ' + element.loc.start.line + ').';
        }
        if (error) {
            throw new SyntaxError(error, element.loc);
        }
    }
    function formatEndTagInfo(tag) {
        return '`' + tag.name + '` (on line ' + tag.loc.end.line + ')';
    }
    var syntax = {
        parse: preprocess,
        builders: b,
        print: build,
        traverse: traverse,
        Walker: Walker
    };
    function preprocess(html) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var mode = options.mode || 'precompile';
        var ast = void 0;
        if (typeof html === 'object') {
            ast = html;
        } else if (mode === 'codemod') {
            ast = handlebars.parseWithoutProcessing(html, options.parseOptions);
        } else {
            ast = handlebars.parse(html, options.parseOptions);
        }
        var entityParser = undefined;
        if (mode === 'codemod') {
            entityParser = new simpleHtmlTokenizer.EntityParser({});
        }
        var program = new TokenizerEventHandlers(html, entityParser).acceptTemplate(ast);
        if (options && options.plugins && options.plugins.ast) {
            for (var i = 0, l = options.plugins.ast.length; i < l; i++) {
                var transform = options.plugins.ast[i];
                var env = util.assign({}, options, { syntax: syntax }, { plugins: undefined });
                var pluginResult = transform(env);
                traverse(program, pluginResult.visitor);
            }
        }
        return program;
    }



    var nodes = /*#__PURE__*/Object.freeze({

    });

    // used by ember-compiler

    exports.AST = nodes;
    exports.preprocess = preprocess;
    exports.builders = b;
    exports.TraversalError = TraversalError;
    exports.cannotRemoveNode = cannotRemoveNode;
    exports.cannotReplaceNode = cannotReplaceNode;
    exports.cannotReplaceOrRemoveInKeyHandlerYet = cannotReplaceOrRemoveInKeyHandlerYet;
    exports.traverse = traverse;
    exports.Path = Path;
    exports.Walker = Walker;
    exports.print = build;
    exports.SyntaxError = SyntaxError;
    exports.isLiteral = isLiteral;
    exports.printLiteral = printLiteral;

    Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,