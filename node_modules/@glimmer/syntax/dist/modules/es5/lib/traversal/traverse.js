import visitorKeys from '../types/visitor-keys';
import { cannotRemoveNode, cannotReplaceNode, cannotReplaceOrRemoveInKeyHandlerYet } from './errors';
import { deprecate } from '@glimmer/util';

import Path from './path';
function getEnterFunction(handler) {
    if (typeof handler === 'function') {
        return handler;
    } else {
        return handler.enter;
    }
}
function getExitFunction(handler) {
    if (typeof handler === 'function') {
        return undefined;
    } else {
        return handler.exit;
    }
}
function getKeyHandler(handler, key) {
    var keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;
    if (keyVisitor === undefined) return;
    var keyHandler = keyVisitor[key];
    if (keyHandler !== undefined) {
        return keyHandler;
    }
    return keyVisitor.All;
}
function getNodeHandler(visitor, nodeType) {
    if (nodeType === 'Template' || nodeType === 'Block') {
        if (visitor.Program) {
            if (false /* LOCAL_DEBUG */) {
                    false && !false && deprecate('TODO');
                }
            return visitor.Program;
        }
    }
    var handler = visitor[nodeType];
    if (handler !== undefined) {
        return handler;
    }
    return visitor.All;
}
function visitNode(visitor, path) {
    var node = path.node,
        parent = path.parent,
        parentKey = path.parentKey;

    var handler = getNodeHandler(visitor, node.type);
    var enter = void 0;
    var exit = void 0;
    if (handler !== undefined) {
        enter = getEnterFunction(handler);
        exit = getExitFunction(handler);
    }
    var result = void 0;
    if (enter !== undefined) {
        result = enter(node, path);
    }
    if (result !== undefined && result !== null) {
        if (JSON.stringify(node) === JSON.stringify(result)) {
            result = undefined;
        } else if (Array.isArray(result)) {
            visitArray(visitor, result, parent, parentKey);
            return result;
        } else {
            var _path = new Path(result, parent, parentKey);
            return visitNode(visitor, _path) || result;
        }
    }
    if (result === undefined) {
        var keys = visitorKeys[node.type];
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            // we know if it has child keys we can widen to a ParentNode
            visitKey(visitor, handler, path, key);
        }
        if (exit !== undefined) {
            result = exit(node, path);
        }
    }
    return result;
}
function get(node, key) {
    return node[key];
}
function set(node, key, value) {
    node[key] = value;
}
function visitKey(visitor, handler, path, key) {
    var node = path.node;

    var value = get(node, key);
    if (!value) {
        return;
    }
    var keyEnter = void 0;
    var keyExit = void 0;
    if (handler !== undefined) {
        var keyHandler = getKeyHandler(handler, key);
        if (keyHandler !== undefined) {
            keyEnter = getEnterFunction(keyHandler);
            keyExit = getExitFunction(keyHandler);
        }
    }
    if (keyEnter !== undefined) {
        if (keyEnter(node, key) !== undefined) {
            throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
        }
    }
    if (Array.isArray(value)) {
        visitArray(visitor, value, path, key);
    } else {
        var keyPath = new Path(value, path, key);
        var result = visitNode(visitor, keyPath);
        if (result !== undefined) {
            // TODO: dynamically check the results by having a table of
            // expected node types in value space, not just type space
            assignKey(node, key, value, result);
        }
    }
    if (keyExit !== undefined) {
        if (keyExit(node, key) !== undefined) {
            throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
        }
    }
}
function visitArray(visitor, array, parent, parentKey) {
    for (var i = 0; i < array.length; i++) {
        var node = array[i];
        var path = new Path(node, parent, parentKey);
        var result = visitNode(visitor, path);
        if (result !== undefined) {
            i += spliceArray(array, i, result) - 1;
        }
    }
}
function assignKey(node, key, value, result) {
    if (result === null) {
        throw cannotRemoveNode(value, node, key);
    } else if (Array.isArray(result)) {
        if (result.length === 1) {
            set(node, key, result[0]);
        } else {
            if (result.length === 0) {
                throw cannotRemoveNode(value, node, key);
            } else {
                throw cannotReplaceNode(value, node, key);
            }
        }
    } else {
        set(node, key, result);
    }
}
function spliceArray(array, index, result) {
    if (result === null) {
        array.splice(index, 1);
        return 0;
    } else if (Array.isArray(result)) {
        array.splice.apply(array, [index, 1].concat(result));
        return result.length;
    } else {
        array.splice(index, 1, result);
        return 1;
    }
}
export default function traverse(node, visitor) {
    var path = new Path(node);
    visitNode(visitor, path);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdHJhdmVyc2FsL3RyYXZlcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQUEsV0FBQSxNQUFBLHVCQUFBO0FBQ0EsU0FBQSxnQkFBQSxFQUFBLGlCQUFBLEVBQUEsb0NBQUEsUUFBQSxVQUFBO0FBTUEsU0FBQSxTQUFBLFFBQUEsZUFBQTs7QUFHQSxPQUFBLElBQUEsTUFBQSxRQUFBO0FBUUEsU0FBQSxnQkFBQSxDQUFBLE9BQUEsRUFDZ0Q7QUFFOUMsUUFBSSxPQUFBLE9BQUEsS0FBSixVQUFBLEVBQW1DO0FBQ2pDLGVBQUEsT0FBQTtBQURGLEtBQUEsTUFFTztBQUNMLGVBQU8sUUFBUCxLQUFBO0FBQ0Q7QUFDRjtBQU1ELFNBQUEsZUFBQSxDQUFBLE9BQUEsRUFDZ0Q7QUFFOUMsUUFBSSxPQUFBLE9BQUEsS0FBSixVQUFBLEVBQW1DO0FBQ2pDLGVBQUEsU0FBQTtBQURGLEtBQUEsTUFFTztBQUNMLGVBQU8sUUFBUCxJQUFBO0FBQ0Q7QUFDRjtBQUVELFNBQUEsYUFBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBRVE7QUFFTixRQUFJLGFBQWEsT0FBQSxPQUFBLEtBQUEsVUFBQSxHQUFnQyxRQUFoQyxJQUFBLEdBQWpCLFNBQUE7QUFDQSxRQUFJLGVBQUosU0FBQSxFQUE4QjtBQUU5QixRQUFJLGFBQWEsV0FBakIsR0FBaUIsQ0FBakI7QUFDQSxRQUFJLGVBQUosU0FBQSxFQUE4QjtBQUM1QixlQUFBLFVBQUE7QUFDRDtBQUNELFdBQU8sV0FBUCxHQUFBO0FBQ0Q7QUFPRCxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsUUFBQSxFQUVxQjtBQUVuQixRQUFJLGFBQUEsVUFBQSxJQUEyQixhQUEvQixPQUFBLEVBQXFEO0FBQ25ELFlBQUksUUFBSixPQUFBLEVBQXFCO0FBQ25CLGdCQUFBLEtBQUEsQ0FBQSxpQkFBQSxFQUFpQjtBQUFBLDZCQUFBLENBQUEsS0FB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ZXNDb250ZW50IjpbImltcG9ydCB2aXNpdG9yS2V5cywgeyBWaXNpdG9yS2V5cywgVmlzaXRvcktleSB9IGZyb20gJy4uL3R5cGVzL3Zpc2l0b3Ita2V5cyc7XG5pbXBvcnQge1xuICBjYW5ub3RSZW1vdmVOb2RlLFxuICBjYW5ub3RSZXBsYWNlTm9kZSxcbiAgY2Fubm90UmVwbGFjZU9yUmVtb3ZlSW5LZXlIYW5kbGVyWWV0LFxufSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi4vdHlwZXMvbm9kZXMnO1xuaW1wb3J0IHsgZGVwcmVjYXRlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBMT0NBTF9ERUJVRyB9IGZyb20gJ0BnbGltbWVyL2xvY2FsLWRlYnVnLWZsYWdzJztcbmltcG9ydCB7IE5vZGVIYW5kbGVyLCBOb2RlVmlzaXRvciwgS2V5SGFuZGxlciwgTm9kZVRyYXZlcnNhbCwgS2V5VHJhdmVyc2FsIH0gZnJvbSAnLi92aXNpdG9yJztcbmltcG9ydCBQYXRoIGZyb20gJy4vcGF0aCc7XG5cbmZ1bmN0aW9uIGdldEVudGVyRnVuY3Rpb248TiBleHRlbmRzIEFTVC5Ob2RlPihcbiAgaGFuZGxlcjogTm9kZVRyYXZlcnNhbDxOPlxuKTogTm9kZUhhbmRsZXI8Tj4gfCB1bmRlZmluZWQ7XG5mdW5jdGlvbiBnZXRFbnRlckZ1bmN0aW9uPE4gZXh0ZW5kcyBBU1QuTm9kZSwgSyBleHRlbmRzIFZpc2l0b3JLZXk8Tj4+KFxuICBoYW5kbGVyOiBLZXlUcmF2ZXJzYWw8TiwgSz5cbik6IEtleUhhbmRsZXI8TiwgSz4gfCB1bmRlZmluZWQ7XG5mdW5jdGlvbiBnZXRFbnRlckZ1bmN0aW9uPE4gZXh0ZW5kcyBBU1QuTm9kZSwgSyBleHRlbmRzIFZpc2l0b3JLZXk8Tj4+KFxuICBoYW5kbGVyOiBOb2RlVHJhdmVyc2FsPE4+IHwgS2V5VHJhdmVyc2FsPE4sIEs+XG4pOiBOb2RlSGFuZGxlcjxOPiB8IEtleUhhbmRsZXI8TiwgSz4gfCB1bmRlZmluZWQge1xuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gaGFuZGxlcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaGFuZGxlci5lbnRlciBhcyBOb2RlSGFuZGxlcjxOPiB8IEtleUhhbmRsZXI8TiwgSz47XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RXhpdEZ1bmN0aW9uPE4gZXh0ZW5kcyBBU1QuTm9kZT4oaGFuZGxlcjogTm9kZVRyYXZlcnNhbDxOPik6IE5vZGVIYW5kbGVyPE4+IHwgdW5kZWZpbmVkO1xuZnVuY3Rpb24gZ2V0RXhpdEZ1bmN0aW9uPE4gZXh0ZW5kcyBBU1QuTm9kZSwgSyBleHRlbmRzIFZpc2l0b3JLZXk8Tj4+KFxuICBoYW5kbGVyOiBLZXlUcmF2ZXJzYWw8TiwgSz5cbik6IEtleUhhbmRsZXI8TiwgSz4gfCB1bmRlZmluZWQ7XG5mdW5jdGlvbiBnZXRFeGl0RnVuY3Rpb248TiBleHRlbmRzIEFTVC5Ob2RlLCBLIGV4dGVuZHMgVmlzaXRvcktleTxOPj4oXG4gIGhhbmRsZXI6IE5vZGVUcmF2ZXJzYWw8Tj4gfCBLZXlUcmF2ZXJzYWw8TiwgSz5cbik6IE5vZGVIYW5kbGVyPE4+IHwgS2V5SGFuZGxlcjxOLCBLPiB8IHVuZGVmaW5lZCB7XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGhhbmRsZXIuZXhpdCBhcyBOb2RlSGFuZGxlcjxOPiB8IEtleUhhbmRsZXI8TiwgSz47XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0S2V5SGFuZGxlcjxOIGV4dGVuZHMgQVNULk5vZGUsIEsgZXh0ZW5kcyBWaXNpdG9yS2V5PE4+PihcbiAgaGFuZGxlcjogTm9kZVRyYXZlcnNhbDxOPixcbiAga2V5OiBLXG4pOiBLZXlUcmF2ZXJzYWw8TiwgSz4gfCBLZXlUcmF2ZXJzYWw8TiwgVmlzaXRvcktleTxOPj4gfCB1bmRlZmluZWQge1xuICBsZXQga2V5VmlzaXRvciA9IHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nID8gaGFuZGxlci5rZXlzIDogdW5kZWZpbmVkO1xuICBpZiAoa2V5VmlzaXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgbGV0IGtleUhhbmRsZXIgPSBrZXlWaXNpdG9yW2tleV07XG4gIGlmIChrZXlIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ga2V5SGFuZGxlciBhcyBLZXlUcmF2ZXJzYWw8TiwgSz47XG4gIH1cbiAgcmV0dXJuIGtleVZpc2l0b3IuQWxsO1xufVxuXG5mdW5jdGlvbiBnZXROb2RlSGFuZGxlcjxOIGV4dGVuZHMgQVNULk5vZGU+KFxuICB2aXNpdG9yOiBOb2RlVmlzaXRvcixcbiAgbm9kZVR5cGU6IE5bJ3R5cGUnXVxuKTogTm9kZVRyYXZlcnNhbDxOPjtcbmZ1bmN0aW9uIGdldE5vZGVIYW5kbGVyKHZpc2l0b3I6IE5vZGVWaXNpdG9yLCBub2RlVHlwZTogJ0FsbCcpOiBOb2RlVHJhdmVyc2FsPEFTVC5Ob2RlPjtcbmZ1bmN0aW9uIGdldE5vZGVIYW5kbGVyPE4gZXh0ZW5kcyBBU1QuTm9kZT4oXG4gIHZpc2l0b3I6IE5vZGVWaXNpdG9yLFxuICBub2RlVHlwZTogTlsndHlwZSddXG4pOiBOb2RlVHJhdmVyc2FsPE4+IHwgTm9kZVRyYXZlcnNhbDxBU1QuTm9kZT4gfCB1bmRlZmluZWQge1xuICBpZiAobm9kZVR5cGUgPT09ICdUZW1wbGF0ZScgfHwgbm9kZVR5cGUgPT09ICdCbG9jaycpIHtcbiAgICBpZiAodmlzaXRvci5Qcm9ncmFtKSB7XG4gICAgICBpZiAoTE9DQUxfREVCVUcpIHtcbiAgICAgICAgZGVwcmVjYXRlKGBUT0RPYCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2aXNpdG9yLlByb2dyYW0gYXMgYW55O1xuICAgIH1cbiAgfVxuXG4gIGxldCBoYW5kbGVyID0gdmlzaXRvcltub2RlVHlwZV07XG4gIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gKGhhbmRsZXIgYXMgdW5rbm93bikgYXMgTm9kZVRyYXZlcnNhbDxOPjtcbiAgfVxuICByZXR1cm4gdmlzaXRvci5BbGw7XG59XG5cbmZ1bmN0aW9uIHZpc2l0Tm9kZTxOIGV4dGVuZHMgQVNULk5vZGU+KFxuICB2aXNpdG9yOiBOb2RlVmlzaXRvcixcbiAgcGF0aDogUGF0aDxOPlxuKTogQVNULk5vZGUgfCBBU1QuTm9kZVtdIHwgdW5kZWZpbmVkIHwgbnVsbCB8IHZvaWQge1xuICBsZXQgeyBub2RlLCBwYXJlbnQsIHBhcmVudEtleSB9ID0gcGF0aDtcblxuICBsZXQgaGFuZGxlcjogTm9kZVRyYXZlcnNhbDxOPiA9IGdldE5vZGVIYW5kbGVyKHZpc2l0b3IsIG5vZGUudHlwZSk7XG4gIGxldCBlbnRlcjtcbiAgbGV0IGV4aXQ7XG5cbiAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGVudGVyID0gZ2V0RW50ZXJGdW5jdGlvbihoYW5kbGVyKTtcbiAgICBleGl0ID0gZ2V0RXhpdEZ1bmN0aW9uKGhhbmRsZXIpO1xuICB9XG5cbiAgbGV0IHJlc3VsdDogQVNULk5vZGUgfCBBU1QuTm9kZVtdIHwgdW5kZWZpbmVkIHwgbnVsbCB8IHZvaWQ7XG4gIGlmIChlbnRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmVzdWx0ID0gZW50ZXIobm9kZSwgcGF0aCk7XG4gIH1cblxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0ICE9PSBudWxsKSB7XG4gICAgaWYgKEpTT04uc3RyaW5naWZ5KG5vZGUpID09PSBKU09OLnN0cmluZ2lmeShyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgIHZpc2l0QXJyYXkodmlzaXRvciwgcmVzdWx0LCBwYXJlbnQsIHBhcmVudEtleSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGF0aCA9IG5ldyBQYXRoKHJlc3VsdCwgcGFyZW50LCBwYXJlbnRLZXkpO1xuICAgICAgcmV0dXJuIHZpc2l0Tm9kZSh2aXNpdG9yLCBwYXRoKSB8fCByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IGtleXMgPSB2aXNpdG9yS2V5c1tub2RlLnR5cGVdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQga2V5ID0ga2V5c1tpXSBhcyBWaXNpdG9yS2V5c1tOWyd0eXBlJ11dICYga2V5b2YgTjtcbiAgICAgIC8vIHdlIGtub3cgaWYgaXQgaGFzIGNoaWxkIGtleXMgd2UgY2FuIHdpZGVuIHRvIGEgUGFyZW50Tm9kZVxuICAgICAgdmlzaXRLZXkodmlzaXRvciwgaGFuZGxlciwgcGF0aCwga2V5KTtcbiAgICB9XG5cbiAgICBpZiAoZXhpdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHQgPSBleGl0KG5vZGUsIHBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdldDxOIGV4dGVuZHMgQVNULk5vZGU+KFxuICBub2RlOiBOLFxuICBrZXk6IFZpc2l0b3JLZXlzW05bJ3R5cGUnXV0gJiBrZXlvZiBOXG4pOiBBU1QuTm9kZSB8IEFTVC5Ob2RlW10ge1xuICByZXR1cm4gKG5vZGVba2V5XSBhcyB1bmtub3duKSBhcyBBU1QuTm9kZSB8IEFTVC5Ob2RlW107XG59XG5cbmZ1bmN0aW9uIHNldDxOIGV4dGVuZHMgQVNULk5vZGUsIEsgZXh0ZW5kcyBrZXlvZiBOPihub2RlOiBOLCBrZXk6IEssIHZhbHVlOiBOW0tdKTogdm9pZCB7XG4gIG5vZGVba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiB2aXNpdEtleTxOIGV4dGVuZHMgQVNULk5vZGU+KFxuICB2aXNpdG9yOiBOb2RlVmlzaXRvcixcbiAgaGFuZGxlcjogTm9kZVRyYXZlcnNhbDxOPixcbiAgcGF0aDogUGF0aDxOPixcbiAga2V5OiBWaXNpdG9yS2V5c1tOWyd0eXBlJ11dICYga2V5b2YgTlxuKSB7XG4gIGxldCB7IG5vZGUgfSA9IHBhdGg7XG5cbiAgbGV0IHZhbHVlID0gZ2V0KG5vZGUsIGtleSk7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQga2V5RW50ZXI7XG4gIGxldCBrZXlFeGl0O1xuXG4gIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBsZXQga2V5SGFuZGxlciA9IGdldEtleUhhbmRsZXIoaGFuZGxlciwga2V5KTtcbiAgICBpZiAoa2V5SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBrZXlFbnRlciA9IGdldEVudGVyRnVuY3Rpb24oa2V5SGFuZGxlcik7XG4gICAgICBrZXlFeGl0ID0gZ2V0RXhpdEZ1bmN0aW9uKGtleUhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXlFbnRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGtleUVudGVyKG5vZGUsIGtleSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgY2Fubm90UmVwbGFjZU9yUmVtb3ZlSW5LZXlIYW5kbGVyWWV0KG5vZGUsIGtleSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmlzaXRBcnJheSh2aXNpdG9yLCB2YWx1ZSwgcGF0aCwga2V5KTtcbiAgfSBlbHNlIHtcbiAgICBsZXQga2V5UGF0aCA9IG5ldyBQYXRoKHZhbHVlLCBwYXRoLCBrZXkpO1xuICAgIGxldCByZXN1bHQgPSB2aXNpdE5vZGUodmlzaXRvciwga2V5UGF0aCk7XG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBUT0RPOiBkeW5hbWljYWxseSBjaGVjayB0aGUgcmVzdWx0cyBieSBoYXZpbmcgYSB0YWJsZSBvZlxuICAgICAgLy8gZXhwZWN0ZWQgbm9kZSB0eXBlcyBpbiB2YWx1ZSBzcGFjZSwgbm90IGp1c3QgdHlwZSBzcGFjZVxuICAgICAgYXNzaWduS2V5KG5vZGUsIGtleSwgdmFsdWUsIHJlc3VsdCBhcyBhbnkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXlFeGl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoa2V5RXhpdChub2RlLCBrZXkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IGNhbm5vdFJlcGxhY2VPclJlbW92ZUluS2V5SGFuZGxlcllldChub2RlLCBrZXkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2aXNpdEFycmF5KFxuICB2aXNpdG9yOiBOb2RlVmlzaXRvcixcbiAgYXJyYXk6IEFTVC5Ob2RlW10sXG4gIHBhcmVudDogUGF0aDxBU1QuTm9kZT4gfCBudWxsLFxuICBwYXJlbnRLZXk6IHN0cmluZyB8IG51bGxcbikge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IG5vZGUgPSBhcnJheVtpXTtcbiAgICBsZXQgcGF0aCA9IG5ldyBQYXRoKG5vZGUsIHBhcmVudCwgcGFyZW50S2V5KTtcbiAgICBsZXQgcmVzdWx0ID0gdmlzaXROb2RlKHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaSArPSBzcGxpY2VBcnJheShhcnJheSwgaSwgcmVzdWx0KSAtIDE7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbktleTxOIGV4dGVuZHMgQVNULk5vZGUsIEsgZXh0ZW5kcyBWaXNpdG9yS2V5PE4+PihcbiAgbm9kZTogTixcbiAga2V5OiBLLFxuICB2YWx1ZTogQVNULk5vZGUsXG4gIHJlc3VsdDogTltLXSB8IFtOW0tdXSB8IG51bGxcbikge1xuICBpZiAocmVzdWx0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgY2Fubm90UmVtb3ZlTm9kZSh2YWx1ZSwgbm9kZSwga2V5KTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgc2V0KG5vZGUsIGtleSwgcmVzdWx0WzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgY2Fubm90UmVtb3ZlTm9kZSh2YWx1ZSwgbm9kZSwga2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGNhbm5vdFJlcGxhY2VOb2RlKHZhbHVlLCBub2RlLCBrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzZXQobm9kZSwga2V5LCByZXN1bHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGljZUFycmF5KGFycmF5OiBBU1QuTm9kZVtdLCBpbmRleDogbnVtYmVyLCByZXN1bHQ6IEFTVC5Ob2RlIHwgQVNULk5vZGVbXSB8IG51bGwpIHtcbiAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxLCAuLi5yZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSwgcmVzdWx0KTtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmF2ZXJzZShub2RlOiBBU1QuTm9kZSwgdmlzaXRvcjogTm9kZVZpc2l0b3IpIHtcbiAgbGV0IHBhdGggPSBuZXcgUGF0aChub2RlKTtcbiAgdmlzaXROb2RlKHZpc2l0b3IsIHBhdGgpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==