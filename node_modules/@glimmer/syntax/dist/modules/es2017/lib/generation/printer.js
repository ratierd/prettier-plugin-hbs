import { voidMap } from '../parser/tokenizer-event-handlers';
import { escapeText, escapeAttrValue } from './util';
const NON_WHITESPACE = /\S/;
export default class Printer {
    constructor(options) {
        this.buffer = '';
        this.options = options;
    }
    /*
      This is used by _all_ methods on this Printer class that add to `this.buffer`,
      it allows consumers of the printer to use alternate string representations for
      a given node.
         The primary use case for this are things like source -> source codemod utilities.
      For example, ember-template-recast attempts to always preserve the original string
      formatting in each AST node if no modifications are made to it.
    */
    handledByOverride(node, ensureLeadingWhitespace = false) {
        if (this.options.override !== undefined) {
            let result = this.options.override(node, this.options);
            if (typeof result === 'string') {
                if (ensureLeadingWhitespace && NON_WHITESPACE.test(result[0])) {
                    result = ` ${result}`;
                }
                this.buffer += result;
                return true;
            }
        }
        return false;
    }
    Node(node) {
        switch (node.type) {
            case 'MustacheStatement':
            case 'BlockStatement':
            case 'PartialStatement':
            case 'MustacheCommentStatement':
            case 'CommentStatement':
            case 'TextNode':
            case 'ElementNode':
            case 'AttrNode':
            case 'Block':
            case 'Template':
                return this.TopLevelStatement(node);
            case 'StringLiteral':
            case 'BooleanLiteral':
            case 'NumberLiteral':
            case 'UndefinedLiteral':
            case 'NullLiteral':
            case 'PathExpression':
            case 'SubExpression':
                return this.Expression(node);
            case 'Program':
                return this.Block(node);
            case 'ConcatStatement':
                // should have an AttrNode parent
                return this.ConcatStatement(node);
            case 'Hash':
                return this.Hash(node);
            case 'HashPair':
                return this.HashPair(node);
            case 'ElementModifierStatement':
                return this.ElementModifierStatement(node);
        }
        return unreachable(node, 'Node');
    }
    Expression(expression) {
        switch (expression.type) {
            case 'StringLiteral':
            case 'BooleanLiteral':
            case 'NumberLiteral':
            case 'UndefinedLiteral':
            case 'NullLiteral':
                return this.Literal(expression);
            case 'PathExpression':
                return this.PathExpression(expression);
            case 'SubExpression':
                return this.SubExpression(expression);
        }
        return unreachable(expression, 'Expression');
    }
    Literal(literal) {
        switch (literal.type) {
            case 'StringLiteral':
                return this.StringLiteral(literal);
            case 'BooleanLiteral':
                return this.BooleanLiteral(literal);
            case 'NumberLiteral':
                return this.NumberLiteral(literal);
            case 'UndefinedLiteral':
                return this.UndefinedLiteral(literal);
            case 'NullLiteral':
                return this.NullLiteral(literal);
        }
        return unreachable(literal, 'Literal');
    }
    TopLevelStatement(statement) {
        switch (statement.type) {
            case 'MustacheStatement':
                return this.MustacheStatement(statement);
            case 'BlockStatement':
                return this.BlockStatement(statement);
            case 'PartialStatement':
                return this.PartialStatement(statement);
            case 'MustacheCommentStatement':
                return this.MustacheCommentStatement(statement);
            case 'CommentStatement':
                return this.CommentStatement(statement);
            case 'TextNode':
                return this.TextNode(statement);
            case 'ElementNode':
                return this.ElementNode(statement);
            case 'Block':
            case 'Template':
                return this.Block(statement);
            case 'AttrNode':
                // should have element
                return this.AttrNode(statement);
        }
        unreachable(statement, 'TopLevelStatement');
    }
    Block(block) {
        /*
          When processing a template like:
               ```hbs
          {{#if whatever}}
            whatever
          {{else if somethingElse}}
            something else
          {{else}}
            fallback
          {{/if}}
          ```
               The AST still _effectively_ looks like:
               ```hbs
          {{#if whatever}}
            whatever
          {{else}}{{#if somethingElse}}
            something else
          {{else}}
            fallback
          {{/if}}{{/if}}
          ```
               The only way we can tell if that is the case is by checking for
          `block.chained`, but unfortunately when the actual statements are
          processed the `block.body[0]` node (which will always be a
          `BlockStatement`) has no clue that its anscestor `Block` node was
          chained.
               This "forwards" the `chained` setting so that we can check
          it later when processing the `BlockStatement`.
        */
        if (block.chained) {
            let firstChild = block.body[0];
            firstChild.chained = true;
        }
        if (this.handledByOverride(block)) {
            return;
        }
        this.TopLevelStatements(block.body);
    }
    TopLevelStatements(statements) {
        statements.forEach(statement => this.TopLevelStatement(statement));
    }
    ElementNode(el) {
        if (this.handledByOverride(el)) {
            return;
        }
        this.OpenElementNode(el);
        this.TopLevelStatements(el.children);
        this.CloseElementNode(el);
    }
    OpenElementNode(el) {
        this.buffer += `<${el.tag}`;
        if (el.attributes.length) {
            el.attributes.forEach(attr => {
                this.buffer += ' ';
                this.AttrNode(attr);
            });
        }
        if (el.modifiers.length) {
            el.modifiers.forEach(mod => {
                this.buffer += ' ';
                this.ElementModifierStatement(mod);
            });
        }
        if (el.comments.length) {
            el.comments.forEach(comment => {
                this.buffer += ' ';
                this.MustacheCommentStatement(comment);
            });
        }
        if (el.blockParams.length) {
            this.BlockParams(el.blockParams);
        }
        if (el.selfClosing) {
            this.buffer += ' /';
        }
        this.buffer += '>';
    }
    CloseElementNode(el) {
        if (el.selfClosing || voidMap[el.tag.toLowerCase()]) {
            return;
        }
        this.buffer += `</${el.tag}>`;
    }
    AttrNode(attr) {
        if (this.handledByOverride(attr)) {
            return;
        }
        let { name, value } = attr;
        this.buffer += name;
        if (value.type !== 'TextNode' || value.chars.length > 0) {
            this.buffer += '=';
            this.AttrNodeValue(value);
        }
    }
    AttrNodeValue(value) {
        if (value.type === 'TextNode') {
            this.buffer += '"';
            this.TextNode(value, true);
            this.buffer += '"';
        } else {
            this.Node(value);
        }
    }
    TextNode(text, isAttr) {
        if (this.handledByOverride(text)) {
            return;
        }
        if (this.options.entityEncoding === 'raw') {
            this.buffer += text.chars;
        } else if (isAttr) {
            this.buffer += escapeAttrValue(text.chars);
        } else {
            this.buffer += escapeText(text.chars);
        }
    }
    MustacheStatement(mustache) {
        if (this.handledByOverride(mustache)) {
            return;
        }
        this.buffer += mustache.escaped ? '{{' : '{{{';
        if (mustache.strip.open) {
            this.buffer += '~';
        }
        this.Expression(mustache.path);
        this.Params(mustache.params);
        this.Hash(mustache.hash);
        if (mustache.strip.close) {
            this.buffer += '~';
        }
        this.buffer += mustache.escaped ? '}}' : '}}}';
    }
    BlockStatement(block) {
        if (this.handledByOverride(block)) {
            return;
        }
        if (block.chained) {
            this.buffer += block.inverseStrip.open ? '{{~' : '{{';
            this.buffer += 'else ';
        } else {
            this.buffer += block.openStrip.open ? '{{~#' : '{{#';
        }
        this.Expression(block.path);
        this.Params(block.params);
        this.Hash(block.hash);
        if (block.program.blockParams.length) {
            this.BlockParams(block.program.blockParams);
        }
        if (block.chained) {
            this.buffer += block.inverseStrip.close ? '~}}' : '}}';
        } else {
            this.buffer += block.openStrip.close ? '~}}' : '}}';
        }
        this.Block(block.program);
        if (block.inverse) {
            if (!block.inverse.chained) {
                this.buffer += block.inverseStrip.open ? '{{~' : '{{';
                this.buffer += 'else';
                this.buffer += block.inverseStrip.close ? '~}}' : '}}';
            }
            this.Block(block.inverse);
        }
        if (!block.chained) {
            this.buffer += block.closeStrip.open ? '{{~/' : '{{/';
            this.Expression(block.path);
            this.buffer += block.closeStrip.close ? '~}}' : '}}';
        }
    }
    BlockParams(blockParams) {
        this.buffer += ` as |${blockParams.join(' ')}|`;
    }
    PartialStatement(partial) {
        if (this.handledByOverride(partial)) {
            return;
        }
        this.buffer += '{{>';
        this.Expression(partial.name);
        this.Params(partial.params);
        this.Hash(partial.hash);
        this.buffer += '}}';
    }
    ConcatStatement(concat) {
        if (this.handledByOverride(concat)) {
            return;
        }
        this.buffer += '"';
        concat.parts.forEach(part => {
            if (part.type === 'TextNode') {
                this.TextNode(part, true);
            } else {
                this.Node(part);
            }
        });
        this.buffer += '"';
    }
    MustacheCommentStatement(comment) {
        if (this.handledByOverride(comment)) {
            return;
        }
        this.buffer += `{{!--${comment.value}--}}`;
    }
    ElementModifierStatement(mod) {
        if (this.handledByOverride(mod)) {
            return;
        }
        this.buffer += '{{';
        this.Expression(mod.path);
        this.Params(mod.params);
        this.Hash(mod.hash);
        this.buffer += '}}';
    }
    CommentStatement(comment) {
        if (this.handledByOverride(comment)) {
            return;
        }
        this.buffer += `<!--${comment.value}-->`;
    }
    PathExpression(path) {
        if (this.handledByOverride(path)) {
            return;
        }
        this.buffer += path.original;
    }
    SubExpression(sexp) {
        if (this.handledByOverride(sexp)) {
            return;
        }
        this.buffer += '(';
        this.Expression(sexp.path);
        this.Params(sexp.params);
        this.Hash(sexp.hash);
        this.buffer += ')';
    }
    Params(params) {
        // TODO: implement a top level Params AST node (just like the Hash object)
        // so that this can also be overridden
        if (params.length) {
            params.forEach(param => {
                this.buffer += ' ';
                this.Expression(param);
            });
        }
    }
    Hash(hash) {
        if (this.handledByOverride(hash, true)) {
            return;
        }
        hash.pairs.forEach(pair => {
            this.buffer += ' ';
            this.HashPair(pair);
        });
    }
    HashPair(pair) {
        if (this.handledByOverride(pair)) {
            return;
        }
        this.buffer += pair.key;
        this.buffer += '=';
        this.Node(pair.value);
    }
    StringLiteral(str) {
        if (this.handledByOverride(str)) {
            return;
        }
        this.buffer += JSON.stringify(str.value);
    }
    BooleanLiteral(bool) {
        if (this.handledByOverride(bool)) {
            return;
        }
        this.buffer += bool.value;
    }
    NumberLiteral(number) {
        if (this.handledByOverride(number)) {
            return;
        }
        this.buffer += number.value;
    }
    UndefinedLiteral(node) {
        if (this.handledByOverride(node)) {
            return;
        }
        this.buffer += 'undefined';
    }
    NullLiteral(node) {
        if (this.handledByOverride(node)) {
            return;
        }
        this.buffer += 'null';
    }
    print(node) {
        let { options } = this;
        if (options.override) {
            let result = options.override(node, options);
            if (result !== undefined) {
                return result;
            }
        }
        this.buffer = '';
        this.Node(node);
        return this.buffer;
    }
}
function unreachable(node, parentNodeType) {
    let { loc, type } = node;
    throw new Error(`Non-exhaustive node narrowing ${type} @ location: ${JSON.stringify(loc)} for parent ${parentNodeType}`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,