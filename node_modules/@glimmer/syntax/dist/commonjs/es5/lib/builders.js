'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SYNTHETIC = undefined;
exports.isLocSexp = isLocSexp;
exports.isParamsSexp = isParamsSexp;
exports.isHashSexp = isHashSexp;
exports.normalizeModifier = normalizeModifier;
exports.normalizeAttr = normalizeAttr;
exports.normalizeHash = normalizeHash;
exports.normalizeHead = normalizeHead;
exports.normalizeElementOptions = normalizeElementOptions;

var _util = require('@glimmer/util');

function buildMustache(path, params, hash, raw, loc, strip) {
    if (typeof path === 'string') {
        path = buildHead(path);
    }
    return {
        type: 'MustacheStatement',
        path: path,
        params: params || [],
        hash: hash || buildHash([]),
        escaped: !raw,
        loc: buildLoc(loc || null),
        strip: strip || { open: false, close: false }
    };
}
function buildBlock(path, params, hash, _defaultBlock, _elseBlock, loc, openStrip, inverseStrip, closeStrip) {
    var defaultBlock = void 0;
    var elseBlock = void 0;
    if (_defaultBlock.type === 'Template') {
        if (false /* LOCAL_DEBUG */) {
                false && !false && (0, _util.deprecate)('b.program is deprecated. Use b.blockItself instead.');
            }
        defaultBlock = (0, _util.assign)({}, _defaultBlock, { type: 'Block' });
    } else {
        defaultBlock = _defaultBlock;
    }
    if (_elseBlock !== undefined && _elseBlock !== null && _elseBlock.type === 'Template') {
        if (false /* LOCAL_DEBUG */) {
                false && !false && (0, _util.deprecate)('b.program is deprecated. Use b.blockItself instead.');
            }
        elseBlock = (0, _util.assign)({}, _elseBlock, { type: 'Block' });
    } else {
        elseBlock = _elseBlock;
    }
    return {
        type: 'BlockStatement',
        path: buildHead(path),
        params: params || [],
        hash: hash || buildHash([]),
        program: defaultBlock || null,
        inverse: elseBlock || null,
        loc: buildLoc(loc || null),
        openStrip: openStrip || { open: false, close: false },
        inverseStrip: inverseStrip || { open: false, close: false },
        closeStrip: closeStrip || { open: false, close: false }
    };
}
function buildElementModifier(path, params, hash, loc) {
    return {
        type: 'ElementModifierStatement',
        path: buildHead(path),
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc || null)
    };
}
function buildPartial(name, params, hash, indent, loc) {
    return {
        type: 'PartialStatement',
        name: name,
        params: params || [],
        hash: hash || buildHash([]),
        indent: indent || '',
        strip: { open: false, close: false },
        loc: buildLoc(loc || null)
    };
}
function buildComment(value, loc) {
    return {
        type: 'CommentStatement',
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildMustacheComment(value, loc) {
    return {
        type: 'MustacheCommentStatement',
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildConcat(parts, loc) {
    return {
        type: 'ConcatStatement',
        parts: parts || [],
        loc: buildLoc(loc || null)
    };
}
function isLocSexp(value) {
    return Array.isArray(value) && value.length === 2 && value[0] === 'loc';
}
function isParamsSexp(value) {
    return Array.isArray(value) && !isLocSexp(value);
}
function isHashSexp(value) {
    if (typeof value === 'object' && value && !Array.isArray(value)) {
        expectType(value);
        return true;
    } else {
        return false;
    }
}
function expectType(_input) {
    return;
}
function normalizeModifier(sexp) {
    if (typeof sexp === 'string') {
        return buildElementModifier(sexp);
    }
    var path = normalizeHead(sexp[0]);
    var params = void 0;
    var hash = void 0;
    var loc = null;
    var parts = sexp.slice(1);
    var next = parts.shift();
    _process: {
        if (isParamsSexp(next)) {
            params = next;
        } else {
            break _process;
        }
        next = parts.shift();
        if (isHashSexp(next)) {
            hash = normalizeHash(next);
        } else {
            break _process;
        }
    }
    if (isLocSexp(next)) {
        loc = next[1];
    }
    return {
        type: 'ElementModifierStatement',
        path: path,
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc || null)
    };
}
function normalizeAttr(sexp) {
    var name = sexp[0];
    var value = void 0;
    if (typeof sexp[1] === 'string') {
        value = buildText(sexp[1]);
    } else {
        value = sexp[1];
    }
    var loc = sexp[2] ? sexp[2][1] : undefined;
    return buildAttr(name, value, loc);
}
function normalizeHash(hash, loc) {
    var pairs = [];
    Object.keys(hash).forEach(function (key) {
        pairs.push(buildPair(key, hash[key]));
    });
    return buildHash(pairs, loc);
}
function normalizeHead(path) {
    if (typeof path === 'string') {
        return buildHead(path);
    } else {
        return buildHead(path[1], path[2] && path[2][1]);
    }
}
function normalizeElementOptions() {
    var out = {};

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    for (var _iterator = args, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var arg = _ref;

        switch (arg[0]) {
            case 'attrs':
                {
                    var rest = arg.slice(1);

                    out.attrs = rest.map(normalizeAttr);
                    break;
                }
            case 'modifiers':
                {
                    var _rest = arg.slice(1);

                    out.modifiers = _rest.map(normalizeModifier);
                    break;
                }
            case 'body':
                {
                    var _rest2 = arg.slice(1);

                    out.children = _rest2;
                    break;
                }
            case 'comments':
                {
                    var _rest3 = arg.slice(1);

                    out.comments = _rest3;
                    break;
                }
            case 'as':
                {
                    var _rest4 = arg.slice(1);

                    out.blockParams = _rest4;
                    break;
                }
            case 'loc':
                {
                    var _rest5 = arg[1];

                    out.loc = _rest5;
                    break;
                }
        }
    }
    return out;
}
function buildElement(tag, options) {
    var normalized = void 0;
    if (Array.isArray(options)) {
        for (var _len2 = arguments.length, rest = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            rest[_key2 - 2] = arguments[_key2];
        }

        normalized = normalizeElementOptions.apply(undefined, [options].concat(rest));
    } else {
        normalized = options || {};
    }
    var _normalized = normalized,
        attrs = _normalized.attrs,
        blockParams = _normalized.blockParams,
        modifiers = _normalized.modifiers,
        comments = _normalized.comments,
        children = _normalized.children,
        loc = _normalized.loc;
    // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST

    var selfClosing = false;
    if (typeof tag === 'object') {
        selfClosing = tag.selfClosing;
        tag = tag.name;
    } else {
        if (tag.slice(-1) === '/') {
            tag = tag.slice(0, -1);
            selfClosing = true;
        }
    }
    return {
        type: 'ElementNode',
        tag: tag || '',
        selfClosing: selfClosing,
        attributes: attrs || [],
        blockParams: blockParams || [],
        modifiers: modifiers || [],
        comments: comments || [],
        children: children || [],
        loc: buildLoc(loc || null)
    };
}
function buildAttr(name, value, loc) {
    return {
        type: 'AttrNode',
        name: name,
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildText(chars, loc) {
    return {
        type: 'TextNode',
        chars: chars || '',
        loc: buildLoc(loc || null)
    };
}
// Expressions
function buildSexpr(path, params, hash, loc) {
    return {
        type: 'SubExpression',
        path: buildHead(path),
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc || null)
    };
}
function buildHead(original, loc) {
    if (typeof original !== 'string') return original;
    var parts = original.split('.');
    var thisHead = false;
    if (parts[0] === 'this') {
        thisHead = true;
        parts = parts.slice(1);
    }
    return {
        type: 'PathExpression',
        original: original,
        this: thisHead,
        parts: parts,
        data: false,
        loc: buildLoc(loc || null)
    };
}
function buildLiteral(type, value, loc) {
    return {
        type: type,
        value: value,
        original: value,
        loc: buildLoc(loc || null)
    };
}
// Miscellaneous
function buildHash(pairs, loc) {
    return {
        type: 'Hash',
        pairs: pairs || [],
        loc: buildLoc(loc || null)
    };
}
function buildPair(key, value, loc) {
    return {
        type: 'HashPair',
        key: key,
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildProgram(body, blockParams, loc) {
    return {
        type: 'Template',
        body: body || [],
        blockParams: blockParams || [],
        loc: buildLoc(loc || null)
    };
}
function buildBlockItself(body, blockParams) {
    var chained = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var loc = arguments[3];

    return {
        type: 'Block',
        body: body || [],
        blockParams: blockParams || [],
        chained: chained,
        loc: buildLoc(loc || null)
    };
}
function buildTemplate(body, blockParams, loc) {
    return {
        type: 'Template',
        body: body || [],
        blockParams: blockParams || [],
        loc: buildLoc(loc || null)
    };
}
function buildSource(source) {
    return source || null;
}
function buildPosition(line, column) {
    return {
        line: line,
        column: column
    };
}
var SYNTHETIC = exports.SYNTHETIC = {
    source: '(synthetic)',
    start: { line: 1, column: 0 },
    end: { line: 1, column: 0 }
};
function buildLoc() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
    }

    if (args.length === 1) {
        var loc = args[0];
        if (loc && typeof loc === 'object') {
            return {
                source: buildSource(loc.source),
                start: buildPosition(loc.start.line, loc.start.column),
                end: buildPosition(loc.end.line, loc.end.column)
            };
        } else {
            return SYNTHETIC;
        }
    } else {
        var startLine = args[0],
            startColumn = args[1],
            endLine = args[2],
            endColumn = args[3],
            source = args[4];

        return {
            source: buildSource(source),
            start: buildPosition(startLine, startColumn),
            end: buildPosition(endLine, endColumn)
        };
    }
}
exports.default = {
    mustache: buildMustache,
    block: buildBlock,
    partial: buildPartial,
    comment: buildComment,
    mustacheComment: buildMustacheComment,
    element: buildElement,
    elementModifier: buildElementModifier,
    attr: buildAttr,
    text: buildText,
    sexpr: buildSexpr,
    path: buildHead,
    concat: buildConcat,
    hash: buildHash,
    pair: buildPair,
    literal: buildLiteral,
    program: buildProgram,
    blockItself: buildBlockItself,
    template: buildTemplate,
    loc: buildLoc,
    pos: buildPosition,
    string: literal('StringLiteral'),
    boolean: literal('BooleanLiteral'),
    number: literal('NumberLiteral'),
    undefined: function (_undefined) {
        function undefined() {
            return _undefined.apply(this, arguments);
        }

        undefined.toString = function () {
            return _undefined.toString();
        };

        return undefined;
    }(function () {
        return buildLiteral('UndefinedLiteral', undefined);
    }),
    null: function _null() {
        return buildLiteral('NullLiteral', null);
    }
};

function literal(type) {
    return function (value) {
        return buildLiteral(type, value);
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,