'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = traverse;

var _visitorKeys = require('../types/visitor-keys');

var _visitorKeys2 = _interopRequireDefault(_visitorKeys);

var _errors = require('./errors');

var _util = require('@glimmer/util');

var _path2 = require('./path');

var _path3 = _interopRequireDefault(_path2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getEnterFunction(handler) {
    if (typeof handler === 'function') {
        return handler;
    } else {
        return handler.enter;
    }
}
function getExitFunction(handler) {
    if (typeof handler === 'function') {
        return undefined;
    } else {
        return handler.exit;
    }
}
function getKeyHandler(handler, key) {
    var keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;
    if (keyVisitor === undefined) return;
    var keyHandler = keyVisitor[key];
    if (keyHandler !== undefined) {
        return keyHandler;
    }
    return keyVisitor.All;
}
function getNodeHandler(visitor, nodeType) {
    if (nodeType === 'Template' || nodeType === 'Block') {
        if (visitor.Program) {
            if (false /* LOCAL_DEBUG */) {
                    false && !false && (0, _util.deprecate)('TODO');
                }
            return visitor.Program;
        }
    }
    var handler = visitor[nodeType];
    if (handler !== undefined) {
        return handler;
    }
    return visitor.All;
}
function visitNode(visitor, path) {
    var node = path.node,
        parent = path.parent,
        parentKey = path.parentKey;

    var handler = getNodeHandler(visitor, node.type);
    var enter = void 0;
    var exit = void 0;
    if (handler !== undefined) {
        enter = getEnterFunction(handler);
        exit = getExitFunction(handler);
    }
    var result = void 0;
    if (enter !== undefined) {
        result = enter(node, path);
    }
    if (result !== undefined && result !== null) {
        if (JSON.stringify(node) === JSON.stringify(result)) {
            result = undefined;
        } else if (Array.isArray(result)) {
            visitArray(visitor, result, parent, parentKey);
            return result;
        } else {
            var _path = new _path3.default(result, parent, parentKey);
            return visitNode(visitor, _path) || result;
        }
    }
    if (result === undefined) {
        var keys = _visitorKeys2.default[node.type];
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            // we know if it has child keys we can widen to a ParentNode
            visitKey(visitor, handler, path, key);
        }
        if (exit !== undefined) {
            result = exit(node, path);
        }
    }
    return result;
}
function get(node, key) {
    return node[key];
}
function set(node, key, value) {
    node[key] = value;
}
function visitKey(visitor, handler, path, key) {
    var node = path.node;

    var value = get(node, key);
    if (!value) {
        return;
    }
    var keyEnter = void 0;
    var keyExit = void 0;
    if (handler !== undefined) {
        var keyHandler = getKeyHandler(handler, key);
        if (keyHandler !== undefined) {
            keyEnter = getEnterFunction(keyHandler);
            keyExit = getExitFunction(keyHandler);
        }
    }
    if (keyEnter !== undefined) {
        if (keyEnter(node, key) !== undefined) {
            throw (0, _errors.cannotReplaceOrRemoveInKeyHandlerYet)(node, key);
        }
    }
    if (Array.isArray(value)) {
        visitArray(visitor, value, path, key);
    } else {
        var keyPath = new _path3.default(value, path, key);
        var result = visitNode(visitor, keyPath);
        if (result !== undefined) {
            // TODO: dynamically check the results by having a table of
            // expected node types in value space, not just type space
            assignKey(node, key, value, result);
        }
    }
    if (keyExit !== undefined) {
        if (keyExit(node, key) !== undefined) {
            throw (0, _errors.cannotReplaceOrRemoveInKeyHandlerYet)(node, key);
        }
    }
}
function visitArray(visitor, array, parent, parentKey) {
    for (var i = 0; i < array.length; i++) {
        var node = array[i];
        var path = new _path3.default(node, parent, parentKey);
        var result = visitNode(visitor, path);
        if (result !== undefined) {
            i += spliceArray(array, i, result) - 1;
        }
    }
}
function assignKey(node, key, value, result) {
    if (result === null) {
        throw (0, _errors.cannotRemoveNode)(value, node, key);
    } else if (Array.isArray(result)) {
        if (result.length === 1) {
            set(node, key, result[0]);
        } else {
            if (result.length === 0) {
                throw (0, _errors.cannotRemoveNode)(value, node, key);
            } else {
                throw (0, _errors.cannotReplaceNode)(value, node, key);
            }
        }
    } else {
        set(node, key, result);
    }
}
function spliceArray(array, index, result) {
    if (result === null) {
        array.splice(index, 1);
        return 0;
    } else if (Array.isArray(result)) {
        array.splice.apply(array, [index, 1].concat(result));
        return result.length;
    } else {
        array.splice(index, 1, result);
        return 1;
    }
}
function traverse(node, visitor) {
    var path = new _path3.default(node);
    visitNode(visitor, path);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,